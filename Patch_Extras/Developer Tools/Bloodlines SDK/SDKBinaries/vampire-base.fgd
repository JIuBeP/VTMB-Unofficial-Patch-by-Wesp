//====== Copyright © 2003-2020, Troika Games, Inc. All rights reserved. =======
//
// Purpose: Vampire Bloodlines game definition file (.fgd) 
// Version: 1.74 beta
// Edition: Original VtMB [Base]
// Written: Psycho-A
//
//=============================================================================

// Generic World Definitions
@mapsize(-16384, 16384)



//*******************************************************************************************************************
//*******************************************************************************************************************
//
// Main Classes
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//====================================================================================================================
// CLASS: WorldBase [common]
//====================================================================================================================
// VTMB-adaptation:
//  removed: coldworld,minoccludeearea,maxoccludeearea (unsup)
//  removed: maxpropscreenwidth,maxpropscreenwidth,detailmaterial (unsup)
//  removed: chaptertitle,gametitle (doesn't work)
//  replaced: skyname "santamonica"
//  added: commentary (for developers and decompilers)
//  added: levelscript,sounds
//  added: fog* params (env_fog_controller base)
//  added: wetness_fadein,wetness_fadeout,wetness_fadetarget
//  added: copwaitarea,safearea,nosferatu_tolerrant,nofrenzyarea

@BaseClass = worldbase
[
	message(string) : "Map Description"
	skyname(choices) : "SkyBox Texture Name" : "santamonica" =
	[
		"black" : "black"
		"chinatown" : "chinatown"
		"hav" : "hav"
		"holly" : "holly"
		"holylight" : "holylight"
		"la" : "la"
		"moon" : "moon"
		"pier" : "pier"
		"santamonica" : "santamonica"
		"warehouse" : "warehouse"
		"warehouse2" : "warehouse2"
		"warehouse3" : "warehouse3"
	]
// exist but unused
//	startdark(choices) : "Level Fade In" : 0 =
//	[	
//		0 : "No"
//		1 : "Yes"
//	]
//	newunit(choices) : "New Level Unit" : 0 : "Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels." = 
//	[
//		0 : "No, keep current"
//		1 : "Yes, clear previous levels"
//	]
// need to implement...
//	detailvbsp(string) : "Detail.vbsp file" : "detail.vbsp" : "Detail.vbsp file to use for emitting detail props (found in directory <root>/modname)"

// vtmb ----
	levelscript(choices) : "Level Python Script" : "santamonica" : "[VTMB] This is a Python Script that controls level functionality. \nThe name is relative to 'python/' directory of game." = 
	[
		"bradbury" : "bradbury"
		"cemetery" : "cemetery"
		"chinatown" : "chinatown"
		"crackhouse" : "crackhouse"
		"demo" : "demo"
		"downtown" : "downtown"
		"fusyndicate" : "fusyndicate"
		"gallery" : "gallery"
		"giovanni" : "giovanni"
		"griffith" : "griffith"
		"hollywood" : "hollywood"
		"leopold" : "leopold"
		"malkavian" : "malkavian"
		"museum" : "museum"
		"santamonica" : "santamonica"
		"temple" : "temple"
		"theatre" : "theatre"
		"tutorial" : "tutorial"
		"ventrue" : "ventrue"
		"warehouse" : "warehouse"
		"warrens" : "warrens"
	]

	comment(string) : "Developer Commentary" : "Created with Bloodlines SDK"

	sep_wsarea(string) readonly: "------------------------------------"

	safearea(choices) : "Area: Safety Type" : 0 : "[VTMB] Selects safety type for map area." = 
	[
		0 : "Combat"
		1 : "Masquerade"
		2 : "Elysium"
	]
	copwaitarea(choices) : "Area: Cops Waiting" : 1 : "[VTMB] Use this map as a place where player can wait the cop's escape." =
	[
		0 : "No"
		1 : "Yes"
	]
	nosferatu_tolerrant(choices) : "Area: Nosferatu-Tolerant" : 0 : "[VTMB] Nosferatu doesn't need to hide for the Masquerade at this area." =
	[
		0 : "No"
		1 : "Yes"
	]
	nofrenzyarea(choices) : "Area: No-Frenzy" : 0 : "[VTMB] Player will not fall Frenzy at this area." =
	[
		0 : "No"
		1 : "Yes"
	]

	sep_wsfog(string) readonly: "------------------------------------"

// came from env_fog_controller
	fogenable(choices) : "Fog: Enabled" : 0 : "[VTMB] Enable fog effect on this map" = [ 0 : "No" 1 : "Yes" ]
	fogcolor(color255) : "Fog: Primary Color" : "255 255 255" : "[VTMB] Primary (main) fog color."
	fogcolor2(color255) : "Fog: Secondary Color" : "255 255 255" : "[VTMB] Secondary fog color that fog transitions into."
	fogstart(float) : "Fog: Start Distance" : "500.0" : "[VTMB] Fog start distance (from player)."
	fogend(float) : "Fog: End Distance" : "2000.0" : "[VTMB] Fog end distance."
	fogblend(choices) : "Fog: Blend Colors" : 0 : "[VTMB] Blend fog between the two defined colors." = [ 0 : "No" 1 : "Yes" ]
	fogdir(angle) : "Fog: Primary Direction" : "1 0 0" : "[VTMB] Primary fog direction."
 // ----

	sep_wsweather(string) readonly: "------------------------------------"

	wetness_fadein(float) : "Wetness: Fade In Time" : "5.0" : "[VTMB] Controls wetness default fadein time on the map."
	wetness_fadeout(float) : "Wetness: Fade Out Time" : "10.0" : "[VTMB] Controls wetness default fadeout time on the map."
	wetness_fadetarget(float) : "Wetness: Fade Target" : "0.0" : "[VTMB] Controls wetness target on the map. Not tested yet..."

	sep_wsother(string) readonly: "------------------------------------"

	MaxRange(integer) : "Max Range (Far Z)" : 4096 : "[VTMB] Far Z Clip Plane. Overrides VVIS max radius [FixMe?]."
	sounds(choices) : "Sounds (Unused)" : 1 : "[VTMB] Purpose not recognized. \nAlmost all game maps have this On [HL1 legacy?]." =
	[
		0 : "Disable"
		1 : "Enable"
	]
]


//====================================================================================================================
// worldspawn [common]
//====================================================================================================================
// added vrad compiling options to process.
// inserted to use modified classes.

@SolidClass base(worldbase) = worldspawn : 
	"This is the world entity. Each map can only contain one, and it's automatically created for you."
[
// Custom compiling options...
	
	sep_wsoptions(string) readonly: "------------------------------------"

	vbsp_luxelscale(choices) : "Lighting: Lightmaps Scale"  : : "Tells VBSP compiler to multiply lightmap scale you're specifying on brush sides. \n" +
																"May help to obtain sharp and realistic shadows without manual tweaking each surface. \n" +
																"Significantly affects compiling time, file size and memory! \n" +
																"Use with care. If not sure, keep '1.00' value." =
	[
		"0.0625" : "0.0625 (1/16 scale, hard shadows)"
		"0.1250" : "0.125 (1/8 scale, sharp shadows)"
		"0.2500" : "0.25 (1/4 scale, natural shadows)"
		"0.5000" : "0.50 (1/2 scale, sharper shadows)"
		   ""    : "1.00 (Original brush faces' scale)"
		"2.0000" : "2.00 (2x scale, worse shadows)"
		"4.0000" : "4.00 (4x scale, blurry shadows)"
		"8.0000" : "8.00 (8x scale, roughest shadows)"
		"16.000" : "16.0 (16x scale, placebo shadows)"
	]

	vrad_bouncescale(choices) : "Lighting: Bouncing Scale"  : : "Tells VRAD compiler to scale reflectivity of diffuse (bounced) light on map. \n" +
																"May help to obtain more realistic surface lighting results when using point lightsources. \n" +
																"Use with care. If not sure, keep it at '1.00' value." =
	[
		"0.0001" : "0.00 (No bouncing)"
		"0.25" : "0.25 (Barely visible)"
		"0.50" : "0.50 (Weak bouncing)"
		"0.75" : "0.75 (Less bouncing)"
		  ""   : "1.00 (Default value)"
		"2.00" : "2.00 (Realistic mode)"
		"3.00" : "3.00 (Smooth bouncing)"
		"5.00" : "5.00 (Wide bouncing)"
		"7.50" : "7.50 (High bouncing)"
		"10.0" : "10.0 (Extreme value)"
	]

	vrad_lightsmooth(choices) : "Lighting: Smoothing Scale" : : "Tells VRAD compiler to apply specified scale factor for smoothing to all light \n" +
																"falloffs given by light* entity's 'Fall-Off..' or '0-percent distance'. May cause \n" +
																"recompiled original maps to look softer, helps with sharp cutoffs. \n"+
																"Use with care. If not sure, keep it at zero value." =
	[
		"-1.00" : "-1.00 (Disable smoothing at all)"
		"-0.75" : "-0.75 (Big decreasing, very sharp)"
		"-0.50" : "-0.50 (Medium decreasing, more sharper)"
		"-0.25" : "-0.25 (Small decreasing, a bit sharper)"
		   ""   :  "0.00 (No scaling, use original values)"
		 "0.25" :  "0.25 (Small increasing, a bit smoother)"
		 "0.50" :  "0.50 (Medium increasing, more smoother)"
		 "0.75" :  "0.75 (Big increasing, very smooth)"
		 "1.00" :  "1.00 (Disable all light cut-offs)"
	]

	vrad_lightscale(choices) : "Lighting: Brightness Scale" : : "Tells VRAD compiler to scale overall light brightness on map with given value. \n" +
																"May be usefull for testing purposes to quickly reduce or increase luminosity on the map. \n" +
																"Use with care. If not sure, keep it at '1.00' value." =
	[
		"0.25" : "0.25 (Very dark)"
		"0.33" : "0.33 (Much darker)"
		"0.50" : "0.50 (Half-bright)"
		"0.66" : "0.66 (Less darker)"
		"0.75" : "0.75 (Small darker)"
		"0.87" : "0.87 (A bit darker)"
		  ""   : "1.00 (As is, default)"
		"1.25" : "1.25 (A bit brighter)"
		"1.50" : "1.50 (Small brighter)"
		"2.00" : "2.00 (Twice brighter)"
		"3.00" : "3.00 (Much brighter)"
		"4.00" : "4.00 (Very bright)"
	]

	vrad_use_phymodels(choices) : "Lighting: Use Phy.Models" : : "By default, VRAD compiler uses computed convex hull for prop_static's \n" +
														   "shadow casting. Enabling this option will tell it to use collision meshes (.phy files) " +
														   "for this. If .phy file not found, the convex hull will be used vice versa. \n"+
														   "Use with care! If not sure, keep it disabled." =
	[
		""  : "No"
		"1" : "Yes"
	]

	vvis_force_fast(choices) : "Compiling: Force Fast" : : "Use this to disable the VVIS second pass if it for some reason freezes on full \n" +
														   "compiling or going too slow. It mainly doesn't make some affect on map's visual " +
														   "appearance, so it also may help compiling large and really hard maps." =
	[
		""  : "No"
		"1" : "Yes"
	]
]



















//====================================================================================================================
// CLASS: Angles, Origin [common]
//====================================================================================================================
// not changed.

@BaseClass = p_Angles
[ 
	angles(angle) : "Pitch Yaw Roll (Y Z X)" : "0 0 0" : "This entity's orientation in the world. Pitch is rotation around the Y axis, " +
		"yaw is the rotation around the Z axis, roll is the rotation around the X axis."
]

@BaseClass = p_Origin
[ 
	origin(origin) : "Origin (X Y Z)" : : "The position of this entity's center in the world. Rotating entities typically rotate around their origin."
]



//====================================================================================================================
// CLASS: Targetname+ [common]
//====================================================================================================================
// VTMB-adaptation:
//  added: TargetnameRot (with Angles)
//  added: StartHidden
//  added: ScriptHide/Unhide
//  added: FadeOutKill
//  removed: OnUser*/FireUser*, KillHierarchy, AddOutput (unsup)

@BaseClass
= c_TargetName
[
	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."

	// inputs
	input Kill(void) : "Removes this entity from the world."
	input FadeOutKill(float): "[VTMB] Fades entity during given time and then removes this from world."
]

@BaseClass
= c_ScriptHide
[
	StartHidden(choices) : "Start Hidden" : 0 : "[VTMB] Don't spawn the entity while the script command didn't sent." = [ 0 : "No" 1 : "Yes" ]
 // inputs
	input ScriptHide(void) : "[VTMB] Hide entity by specific python script."
	input ScriptUnhide(void) : "[VTMB] Spawn entity by specific python script if it was hided."
]


@BaseClass
base (
	c_TargetName,
	c_ScriptHide 
)
= Targetname []

@BaseClass
base (
	c_TargetName,
	p_Angles,
	c_ScriptHide
)
= TargetnameRot []





//====================================================================================================================
// CLASS: Parentname [common]
//====================================================================================================================
// VTMB-adaptation:
//  removed: SetParentAttachment* (unsup)
//  renamed: Parent -> Parent Entity
//  added: line() to target entity

@BaseClass
= Parentname
[ 
	parentname(target_destination) : "Parent Entity" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."

	// Inputs
	input SetParent(string) : "Changes the entity's parent in the movement hierarchy."
	input ClearParent(void) : "Removes this entity from the the movement hierarchy, leaving it free to move independently."
]



//====================================================================================================================
// CLASS: Global [common]
//====================================================================================================================
// VTMB-adaptation:
//  renamed: Global Entity Name -> Global Name

@BaseClass = p_Global 
[ 
	globalname(string) : "Global Name" : "" : "Name by which this entity is linked to another entity in a different map. When the player transitions to a new map, entities in the new map with globalnames matching entities in the previous map will have the previous map's state copied over their state."
]



//====================================================================================================================
// CLASS: EnableDisable [common]
//====================================================================================================================
// not changed.

@BaseClass = EnableDisable
[
	StartDisabled(choices) : "Start Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input Enable(void) : "Enable this entity."
	input Disable(void) : "Disable this entity."
]



//====================================================================================================================
// CLASS: Shadow [common]
//====================================================================================================================
// renamed.

@BaseClass
= p_DisableShadows
[
	disableshadows(choices) : "Disable Shadows" : 0 : "Disables shadow casing from this object." =
	[
		0 : "No"
		1 : "Yes"
	]
]



//====================================================================================================================
// CLASS: RenderFxChoices [common]
//====================================================================================================================
// renamed.

@BaseClass
= p_RenderFxChoices
[
	sep_rfmain(string) readonly: "------------------------------------"

	renderfx(choices) : "Render FX" : 0 =
	[
		0: "Normal"
		1: "Slow Pulse"
		2: "Fast Pulse"
		3: "Slow Wide Pulse"
		4: "Fast Wide Pulse"
		9: "Slow Strobe"
		10: "Fast Strobe"
		11: "Faster Strobe"
		12: "Slow Flicker"
		13: "Fast Flicker"
		5: "Slow Fade Away"
		6: "Fast Fade Away"
		7: "Slow Become Solid"
		8: "Fast Become Solid"
		14: "Constant Glow"
		15: "Distort"
		16: "Hologram (Distort + fade)"
		23: "Cull By Distance (TEST)"
		24: "Spotlight FX"
		26: "Fade Near"
	]
]



//====================================================================================================================
// CLASS: RenderFields [common]
//====================================================================================================================
// VTMB-adaptation:
//  added: disableshadows (legacy)
//  improved shadows' descriptions
//  merged with RenderFxChoices
//  disabled disablereceiveshadows (not affects)

@BaseClass
= f_RenderFields
[
	sep_rfmain(string) readonly: "------------------------------------"
]

@BaseClass
base (
	f_RenderFields,
	p_DisableShadows,
	p_RenderFxChoices
)
= RenderFields
[
// doesn't make any significant effect
//	disablereceiveshadows(choices) : "Disable Receiving Shadows" : 0 : "Disables shadows on object receiving from world and other objects." = [ 0 : "No" 1 : "Yes" ]

	rendermode(choices) : "Render Mode" : 0 : "Used to set a non-standard rendering mode on this entity. See also 'FX Amount' and 'FX Color'." =
	[
		0: "Normal"
		1: "Color"
		2: "Texture"
		3: "Glow"
		4: "Solid"
		5: "Additive"
		7: "Additive Fractional Frame"
		9: "World Space Glow"
		10: "Don't Render"
	]
	renderamt(integer) : "Render Amount (0-255)" : 255 : "The FX amount is used by the selected Render Mode."
	rendercolor(color255) : "Render Color (R G B)" : "255 255 255" : "The FX color is used by the selected Render Mode."

	input Alpha(integer) : "Set the object's alpha (0 - 255)."
	input Color(color255) : "Set the object's color (R G B)."
]





//====================================================================================================================
// CLASS: Studiomodel [common]
//====================================================================================================================
// VTMB-adaptation:
//  added: base(Targetname,Angles) (used by all)
//  added: skin-transition params
//  removed: some io's (new)
//  improved skin control

@BaseClass
= p_Model
[
	model(studio) : "Model" :  : "Entity's world model ('models/<file>.mdl')."
]

@BaseClass
base (
	TargetnameRot,
	p_Model
)
= Studiomodel
[
	skin(choices) : "Default Skin" : 0 : "Some models have multiple versions of their textures, called skins. \nSet this to a number other than 0 to use that skin instead of the default." =
	[ 0:0 1:1 2:2 3:3 4:4 5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 16:16 17:17 18:18 19:19 20:20 21:21 22:22 23:23 24:24 25:25 26:26 27:27 28:28 29:29 30:30 31:31 ]
	crossfade_skin_time(float) : "Skin Crossfade Time" : "2.0" : "The time that needed for cross-fading transition between model's skins given by output (in seconds)."
	disableshadows(choices) : "Disable Shadows" : 0 : "Disables shadow casing from this object." = [ 0 : "No" 1 : "Yes" ]

	// inputs
	input Skin(integer) : "Changes the model skin to the specified number."
	input SetSkin(integer) : "[VTMB] Changes the model skin to the specified number (same as 'skin')."
	input SetSkinFadeTime(float) : "[VTMB] Sets fade time between skin transitions."
	input FadeToSkin(integer) : "[VTMB] Fades to specified skin (define number)."
]

// FIXME!!!
@BaseClass base(TargetnameRot) = Studiomodel2
[
// vtmb ----
	demo_sequence(choices) : "Demo Animation" : "None" : "Default animation sequence for the model to be playing after spawning." = 
	[
		"None" : "None"
		"idle" : "Idle"
	]
	npc_transparent(choices) : "NPC-Transparent" : 1 : "[VTMB] NPCs are transparent for this object [not tested]." =
	[
		0 : "No"
		1 : "Yes"
	]
]



//===================================================================================================================
// CLASS: DamageFilter [common]
//===================================================================================================================
// not changed.

@BaseClass = DamageFilter
[ 
	damagefilter(target_destination) : "Damage Filter" : "" : "Name of the filter entity that controls which entities can damage us."
	input SetDamageFilter(string) : "Sets the entity to use as damage filter. Pass in an empty string to clear the damage filter."
]




//====================================================================================================================
// CLASS: VUseConnects [VTMB-specific]
//====================================================================================================================

@BaseClass = o_VUsableExt
[ 
	// outputs
	output OnUseBegin(void) : "[VTMB] Determines what to do when using the entity began."
	output OnUseEnd(void) : "[VTMB] Determines what to do when using the entity over."
]



//===================================================================================================================
// CLASS: VBreakingConnects [common, VTMB-adapted]
//===================================================================================================================

@BaseClass = o_VBreakable
[
	// inputs
	input Break(void) : "Breaks the breakable."
	input SetHealth(integer) : "Sets a new value for the breakable's health. If the breakable's health reaches zero it will break."
	input AddHealth(integer) : "Adds health to the breakable. If the breakable's health reaches zero it will break."
	input RemoveHealth(integer) : "Removes health from the breakable. If the breakable's health reaches zero it will break."
	input SetDebris(integer) : "Set debris type spawned when entity breaks [not tested]."

	// outputs
	output OnBreak(void) : "Fired when this breakable breaks."
	output OnHealthChanged(float) : "Fired when the health of this breakable changes, passing the new value of health as a percentage of max health, from [0..1]."
]


//===================================================================================================================
// CLASS: KeyFrame [common]
//===================================================================================================================
// not changed.

@BaseClass = KeyFrame
[
	NextKey(target_destination) : "Next KeyFrame" : : "Name of the next keyframe along this keyframe path."
	MoveSpeed(integer) : "Speed (units per second)" : 64					// NEEDHELP
]


//===================================================================================================================
// CLASS: Mover [common]
//===================================================================================================================
// not changed.

@BaseClass = Mover
[
	PositionInterpolator(choices) : "Position Interpolator" : 0 =
	[
		0 : "Linear"
		1 : "Catmull-Rom Spline"
	]
]


































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// ITEMS
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//====================================================================================================================
// CLASS: Item [hl2-based]
//====================================================================================================================
// VTMB-adaptation:
//  added: new io's
//  removed: fade* params (unused)
//  removed: OnCacheInteraction,OnPlayerTouch (unsup)

@BaseClass color(0 0 200) base(TargetnameRot,p_DisableShadows) = Item
[
	spawnflags(Flags) =
	[
		1 : "Start Constrained" : 0
	]
	
// vtmb ----
	output OnPlayerPickup(void) : "Fired whenever the player picks up this item (with +USE)."
]








//====================================================================================================================
// CLASSes: IconSets [VTMB-specific]
//====================================================================================================================

@BaseClass = VUseIcons
[
	use_icon(choices) : "Use Icon" : 0 : "An icon that indicates when player can be able to use this entity and it is openable." = 
	[
		0: "None"
		0: " "
		0: " -- door icons --"
		10: "Door (Openable)"
		58: "Door (Player wanted)"
		59: "Door (Transition)"
		60: "Hatch (Transition)"
		0: " "
		0: " -- buttons, switches --"
		12: "Switch (wall)"
		64: "Switch (power)"
		31: "Elevator button: Up"
		32: "Elevator button: Down"
		21: "Elevator button: 1"
		22: "Elevator button: 2"
		23: "Elevator button: 3"
		24: "Elevator button: 4"
		25: "Elevator button: 5"
		26: "Elevator button: 6"
		27: "Elevator button: 7"
		28: "Elevator button: B"
		29: "Elevator button: G"
		49: "Elevator button: PH"
		30: "Elevator button: Locked"
		0: " "
		0: " -- locks, keys --"
		3:  "Default lock"
		4:  "Key"
		5:  "Access card"
		53: "Electronic lock"
		54: "Electronic lock (deny)"
		0: " "
		0: " -- sign icons --"
		18: "Note"
		40: "Clipboard"
		41: "Printed Papers"
		36: "Book"
		50: "Bus stop Map"
		51: "Sewer Transition map"
		57: "Sewer Lines map"
		46: "Giovanni book"
		0: " "
		0: " -- usable icons --"
		2:  "Computer"
		6:  "Lootable crate"
		7:  "TV monitor"
		43: "Phonograph"
		48: "Web camera"
		38: "Reel recorder"
		42: "Projector light"
		34: "Valve wheel"
		61: "Pedestal"
		35: "Stove"
		37: "Sconce"
		16: "Tubes"
		0: " "
		0: " -- talking icons --"
		15: "Talk NPC (Male)"
		14: "Talk NPC (Female)"
		8:  "Phone"
		47: "Payphone"
		0: " "
		0: " -- place icons --"
		17: "Use Bomb"
		55: "Breakable"
		62: "Dance (Male)"
		63: "Dance (Female)"
		0: " "
		0: " -- other icons --"
		9:  "Physic Hand"
		19: "Stealth succeed"
		20: "Stealth chance"
		33: "Sword"
		45: "Slaughter"
		52: "Skull"
		73: "Pushable prop"
		66: "Malk Chaos"
		67: "Malk Key"
		68: "Malk Mind"
		69: "Malk Order"
		70: "Malk Sight"
		71: "Malk Time"
		72: "Malk Mind"
		0: " "
		0: " -- unused icons --"
		1:  "Carry body (unused)"
		13: "Switch 1 (13)"
		39: "Key (39)"
		44: "Phonograph (44)"
		56: "Bus stop Map (56)"
		11: "Empty (11)"
		65: "Empty (65)"
	]
]

@BaseClass = VLockedIcons
[
	locked_icon(choices) : "Locked Icon" : 3 : "An icon that indicates locked state of this entity." = 
	[
		0: "None"
		0: " "
		0: " -- door icons --"
		10: "Door (Openable)"
		58: "Door (Player wanted)"
		59: "Door (Transition)"
		60: "Hatch (Transition)"
		0: " "
		0: " -- buttons, switches --"
		12: "Switch (wall)"
		64: "Switch (power)"
		31: "Elevator button: Up"
		32: "Elevator button: Down"
		21: "Elevator button: 1"
		22: "Elevator button: 2"
		23: "Elevator button: 3"
		24: "Elevator button: 4"
		25: "Elevator button: 5"
		26: "Elevator button: 6"
		27: "Elevator button: 7"
		28: "Elevator button: B"
		29: "Elevator button: G"
		49: "Elevator button: PH"
		30: "Elevator button: Locked"
		0: " "
		0: " -- locks, keys --"
		3:  "Default lock"
		4:  "Key"
		5:  "Access card"
		53: "Electronic lock"
		54: "Electronic lock (deny)"
		0: " "
		0: " -- sign icons --"
		18: "Note"
		40: "Clipboard"
		41: "Printed Papers"
		36: "Book"
		50: "Bus stop Map"
		51: "Sewer Transition map"
		57: "Sewer Lines map"
		46: "Giovanni book"
		0: " "
		0: " -- usable icons --"
		2:  "Computer"
		6:  "Lootable crate"
		7:  "TV monitor"
		43: "Phonograph"
		48: "Web camera"
		38: "Reel recorder"
		42: "Projector light"
		34: "Valve wheel"
		61: "Pedestal"
		35: "Stove"
		37: "Sconce"
		16: "Tubes"
		0: " "
		0: " -- talking icons --"
		15: "Talk NPC (Male)"
		14: "Talk NPC (Female)"
		8:  "Phone"
		47: "Payphone"
		0: " "
		0: " -- place icons --"
		17: "Use Bomb"
		55: "Breakable"
		62: "Dance (Male)"
		63: "Dance (Female)"
		0: " "
		0: " -- other icons --"
		9:  "Physic Hand"
		19: "Stealth succeed"
		20: "Stealth chance"
		33: "Sword"
		45: "Slaughter"
		52: "Skull"
		73: "Pushable prop"
		66: "Malk Chaos"
		67: "Malk Key"
		68: "Malk Mind"
		69: "Malk Order"
		70: "Malk Sight"
		71: "Malk Time"
		72: "Malk Mind"
		0: " "
		0: " -- unused icons --"
		1:  "Carry body (unused)"
		13: "Switch 1 (13)"
		39: "Key (39)"
		44: "Phonograph (44)"
		56: "Bus stop Map (56)"
		11: "Empty (11)"
		65: "Empty (65)"
	]
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// SOUND
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// ambient_generic [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: fadeinsecs,fadeoutsecs
//  added: Parentname
//  added: fadein,fadeout (legacy)
//  added: flag_force_looping
//  added: flag_no_sfx
//  added: flag_no_voice_duck
//  added: flag_skip_collide
//  added: sound_event
//  added: sound_event_level
//  added: sound_event_owner

@PointClass
base (
	Targetname,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
color(192 192 192)
iconsprite("editor/ambient_generic.vmt")
sphere(radius)
= ambient_generic : 
	"Universal ambient sound. Use it to play and control a single sound."
[
	message(sound) : "Sound Name" :  : "Name of WAV/MP3 sound file to play. \nAlso supports HL2-style GameSound script entries."
	health(integer) : "Volume" : 10 : "Sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	pitch(integer) : "Pitch" : 100 : "Sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
	radius(string) : "Max Audible Distance" : 1250 : "Maximum distance at which this sound is audible."
	SourceEntityName(target_destination) : "Source Entity Name" :  : "If an entity is specified, sound will come from this named entity instead of the location of ambient_generic."

	sep_ambgmisc(string) readonly: "------------------------------------"

	// additionals
	volstart(integer) : "Start Volume" : 0							// NEEDHELP
	pitchstart(integer) : "Start Pitch" : 100						// NEEDHELP

// vtmb ----
	fadein(integer) : "Fade in time (0-100)" : 0 : "[VTMB] Fade-in time when sound starts playing [by input?]."
	fadeout(integer) : "Fade out time (0-100)" : 0 : "[VTMB] Fade-out time when sound stops playing [by input?]."
	
	sound_event(choices) : "Sound Event Type" : 0 : "[VTMB] Unknown yet..." = [ 0:0 1:1 2:2 3:3 4:4 ]
	sound_event_level(choices) : "Sound Event Level" : 2 : "[VTMB] Unknown yet..." = [ 0:0 1:1 2:2 3:3 4:4 ]
	sound_event_owner(target_destination) : "Sound Event Owner" : : "[VTMB] Unknown yet..."

	sep_ambgflgs(string) readonly: "------------------------------------"

	// special flags
	flag_force_looping(choices) : "Flag: Force Loop" : 0 : "[VTMB] Force enables looping even if wave has not looping cue-points." = [ 0 : "False" 1 : "True" ]
	flag_no_sfx(choices) : "Flag: No SFX" : 0 : "[VTMB] Defines, can sound accept sound effects or not (not tested)." = [ 0 : "False" 1 : "True" ]
	flag_no_voice_duck(choices) : "Flag: No Voice Duck" : 0 : "[VTMB] Force enables or disables voice duck option on this sound." = [ 0 : "False" 1 : "True" ]
	flag_skip_collide(choices) : "Flag: Skip Collision" : 0 : "[VTMB] Ignore collisions on sourfaces (not tested)." = [ 0 : "False" 1 : "True" ]

	sep_ambgunkn(string) readonly: "------------------------------------"

	preset(choices) : "Dynamic Presets" : 0 =						// NEEDHELP
	[
		0: "None"
		1: "Huge Machine"
		2: "Big Machine"
		3: "Machine"
		4: "Slow Fade in"  
		5: "Fade in"
		6: "Quick Fade in"
		7: "Slow Pulse"
		8: "Pulse"
		9: "Quick pulse"
		10: "Slow Oscillator"
		11: "Oscillator"
		12: "Quick Oscillator"
		13: "Grunge pitch"
		14: "Very low pitch"
		15: "Low pitch"
		16: "High pitch"
		17: "Very high pitch"
		18: "Screaming pitch"
		19: "Oscillate spinup/down"
		20: "Pulse spinup/down"
		21: "Random pitch"
		22: "Random pitch fast"
		23: "Incremental Spinup"
		24: "Alien"
		25: "Bizzare"
		26: "Planet X"
		27: "Haunted"
	]
	spinup(integer) : "Spin up time (0-100)" : 0					// NEEDHELP
	spindown(integer) : "Spin down time (0-100)" : 0				// NEEDHELP
	lfotype(integer) : "LFO type (0-3)" : 0 : "0) off 1) sqr 2) tri 3) rnd"		// NEEDHELP
	lforate(integer) : "LFO rate (0-1000)" : 0						// NEEDHELP
	lfomodpitch(integer) : "LFO mod pitch (0-100)" : 0				// NEEDHELP
	lfomodvol(integer) : "LFO mod vol (0-100)" : 0					// NEEDHELP
	cspinup(integer) : "Incremental Spinup Count" : 0				// NEEDHELP

	// flags
	spawnflags(flags) =
	[
		1: "Play everywhere" : 0
		16: "Start Silent": 0
		32: "Is NOT Looped": 0
	]

	// inputs
	input Pitch(integer) : "Sets the sound pitch, expressed as a range from 1 to 255, where 100 is the sound's default pitch."
	input PlaySound(void) : "Starts the sound."
	input StopSound(void) : "Stops the sound if it is playing."
	input ToggleSound(void) : "Toggles the sound between playing and stopping."
	input Volume(integer) : "Sets the sound volume, expressed as a range from 0 to 10, where 10 is the loudest."
	
	// outputs
	output OnTrigger(void) : "[VTMB] Fired when entity is triggered [need to check!]."
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// BUTTONS
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//====================================================================================================================
// CLASS: Button [common]
//====================================================================================================================
// VTMB-adaptation:
//  added: base(Targetname)
//  added: base(Parentname)
//  added: base(Shadow)
//  added: speed (from common ents)
//  added: health (from common ents)
//  added: sounds (from common ents)
//  added: wait (from common ents)
//  fixed: sounds (description)
//  removed: PressIn,PressOut

@BaseClass base(TargetnameRot,Parentname,p_Origin) = Button
[
	speed(integer) : "Speed" : 5 : "The speed that the button moves, in inches per second."
	health(integer) : "Strength" : 0 : "Legacy method of specifying whether or not the button can be shot to activate it. Use the 'Damage Activates' spawnflag instead."
	sounds(choices) : "Sounds" : 0 : "[Legacy] Type of sound (defined in source code) played when button pressed. Not used in VTMB game, but supported. It's better to use ambient_generic connection instead." = 
	[
		"": "None"
	]
	wait(integer) : "Delay Before Reset (-1 stay)" : 3 : "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. If the value is set to -1, the button never returns."

	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input Press(void) : "Activate the button as if it was pressed."

	// Outputs
	output OnDamaged(void) : "Fired when the button is damaged."
	output OnPressed(void) : "Fired when the button is pressed."
	output OnPressedLocked(void) : "Fired when the button is used while locked."
	output OnIn(void) : "Fired when the button reaches the in/pressed position."
	output OnOut(void) : "Fired when the button reaches the out/released position."
]





//===================================================================================================================
// func_button [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: master (obsolete),movedir
//  removed: locked_sentence, unlocked_sentence
//  removed: base(DamageFilter)
//  removed: base(Angles) (included)
//  removed: OnUseLocked,PressIn,PressOut (unsup)
//  added: use_filter_name

@BaseClass
= e_func_button
[
	sep_butmove(string) readonly: "------------------------------------"

	speed(integer) : "Moving Speed" : 5 : "The speed that the button moves, in inches per second."
	angles(angle) : "Move Direction" : "0 0 0" : "Specifies the direction of motion to move when the button is used (Pitch, Yaw, Roll)."
	wait(integer) : "Delay Before Reset (-1 stay)" : -1 : "Amount of time, in seconds, after the button has been pressed before it returns to the starting position. Once it has returned, it can be used again. \nIf the value is set to -1, the button never returns."

	sep_buticon(string) readonly: "------------------------------------"

	use_icon(choices) : "Use Icon" : 12 : "An icon that indicates unlocked state of this entity." =
	[
		 0: "None"
		 3: "Lock"
		 4: "Key"
		10: "Door (open)"
		12: "Switch (wall)"
		64: "Switch (power)"
		 7: "TV screen"

		15: "Talk NPC (male)"
		14: "Talk NPC (female)"

		 6: "Lootable container"
		34: "Drop/Valve wheel"
		36: "Arrow left/Book"
		38: "Reel recorder"
		48: "Web camera"
		55: "Breakable"
		60: "Sewer hatch (transition)"
	]
	locked_icon(choices) : "Locked Icon" : 3 : "An icon that indicates locked state of this entity." =
	[
		 0: "None"
		 3: "Lock"
		12: "Switch (wall)"
		64: "Switch (power)"

		58: "Door (player wanted)"
		6:  "Lootable container"
		34: "Drop/Valve wheel"
		11: "Stakeable/Empty"
	]

	sep_butsnds(string) readonly: "------------------------------------"

	// sounds
	soundgroup(choices) : "Sound Group" : "small_metal_switch" : "[VTMB] The group of sounds relative to 'sound/usable/switches/<groupname>/<action>.wav' that specifies 'on/off' sounds." = 
	[
		"" : "None"
		"elevator_button" : "Elevator Button"
		"large_metal_lever" : "Large Metal Lever"
		"manhole_cover" : "Manhole Cover"
		"medium_metal_switch" : "Medium Metal Switch"
		"small_metal_switch" : "Small Metal Switch"
		"wall_light_switch" : "Wall Light Switch"
		"radio" : "Radio"
		"tv" : "TV"
	]
	locked_sound(choices) : "Locked Sound" : "environmental/electronic/deny_beep.wav" : "Sound file played when the player tries to use the button, and fails because it's locked." =
	[
		"" : "None"
		"environmental/electronic/deny_beep.wav" : "environmental/electronic/deny_beep.wav"
	]
	unlocked_sound(choices) : "Unlocked Sound" : "environmental/electronic/button_beep.wav" : "Sound file played when the button is unlocked." =
	[
		"" : "None"
		"environmental/electronic/button_beep.wav" : "environmental/electronic/button_beep.wav"
	]
	sounds(choices) : "Pressed Sound" :  : "Sound file played when button pressed." =
	[
		"" : "None"
		"environmental/electronic/button_beep.wav" : "environmental/electronic/button_beep.wav"
	]

	sep_butadds(string) readonly: "------------------------------------"
	
	lip(integer) : "Lip (inches)" : 0 : "The amount, in inches, of the button to leave sticking out of the wall it recedes into when pressed. Negative values make the button recede even further into the wall."
	health(integer) : "Button Strength" : 0 : "Method of specifying whether or not the button can be damaged to activate it. \nYou may also use the 'Damage Activates' spawnflag instead if supported."
	use_filter_name(filterclass) : "Usage Filter" : : "[VTMB] Link to 'filter_activator_*' entity that defines usage filtering [not tested]."

	spawnflags(flags) =
	[
		1: "Don't move" : 0
		32: "Toggle" : 0
		256: "Touch Activates": 0
		512: "Damage Activates": 0
		1024: "Use Activates" : 1
		2048: "Starts Locked" : 0
		4096: "Sparks" : 0
		128: "Flag 128 (unknown yet)" : 0
		8192: "Flag 8192 (unknown yet)" : 0
	]
	
	// Inputs
	input Lock(void) : "Lock the button, preventing it from functioning."
	input Unlock(void) : "Unlock the button, allowing it to function."
	input Press(void) : "Activate the button as if it was pressed."

	// Outputs
	output OnDamaged(void) : "Fired when the button is damaged."
	output OnPressed(void) : "Fired when the button is pressed."
	output OnPressedLocked(void) : "Fired when the button is used while locked."
	output OnIn(void) : "Fired when the button reaches the in/pressed position."
	output OnOut(void) : "Fired when the button reaches the out/released position."
]

@SolidClass
base (
	Targetname,
	Parentname,
	p_Origin,
	e_func_button,
	RenderFields
)
= func_button :
	"A brush entity that's designed to be used for a player-useable button (Pitch Yaw Roll). When used by the player, it moves to a pressed position."
[
	// RF order fix
]

































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// Doors
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//====================================================================================================================
// CLASS: VDoor [common + VTMB-specific]
//====================================================================================================================
// VTMB-adaptation:
//  merged with VDoorBase*
//  moved: Shadow (RenderFields)
//  removed: master (obsolete)
//  removed: noise1,noise2 (unused)
//  removed: startclosesound,closesound (unsup)
//  removed: locked_sound,unlocked_sound
//  removed: loopmovesound
//  removed: forceclosed,ignoredebris,message (unsupported)
//  removed: locked_sentence (obsolete)
//  removed: unlocked_sentence (obsolete)
//  added: linked_door,soundgroup
//  added: *_icon,noopenwanted

@BaseClass
base (
	Targetname,
	Parentname,
	p_Origin,
	p_Global
)
color(0 255 0)
= VDoorBase1
[
	sep_doormain(string) readonly: "------------------------------------"
	speed(integer) : "Moving Speed" : 100 : "The speed at which the door moves."
	// distance(choices) -> func_door_rotating
	// angles(angle) -> func_door
]

@BaseClass
= VDoorBase2
[
	// basic
	wait(integer) : "Delay Before Reset (-1 stay)" : 8 : "Amount of time, in seconds, after the door has opened before it closes. Once it has closed, it can be used again. If the value is set to -1, the door never closes itself."
	linked_door(target_destination): "Name of Linked Door" : : "[VTMB] Door that inherits properties of this entity and works simultaneously."

	sep_doorfeat(string) readonly: "------------------------------------"

	// feats
	soundgroup(choices) : "Sound Group" : "standard_door" : "[VTMB] The group of sounds relative to 'sound/usable/openable/<groupname>/<action>.wav' that specifies open/close/swing/locked sounds." = 
	[
		"" : "None"
		"car_trunk" : "Car Trunk"
		"chainlink_gate" : "Chain-link Gate"
		"heavy_iron_gate" : "Heavy Iron Gate"
		"light_iron_gate" : "Light Iron Gate"
		"jewelry_box" : "Jewelry Box"
		"metal_chest" : "Metal Chest"
		"metal_hatch" : "Metal Hatch"
		"metal_heavy_powered" : "Metal Heavy-Powered"
		"old_wood_window" : "Old Wood Window"
		"push_arm_door" : "Push Arm Door"
		"sliding_glass_door" : "Sliding Glass Door"
		"sliding_glass_window" : "Sliding Glass Window"
		"sliding_plywood" : "Sliding Plywood"
		"squeaky_metal door" : "Squeaky Metal Door"
		"squeaky_wood door" : "Squeaky Wood Door"
		"standard_door" : "Standard Door"
		"stone_door" : "Stone Door"
		"wood_cabnet" : "Wood Cabnet"
		"wood_drawer" : "Wood Drawer"
		"wooden_chest" : "Wooden Chest"
	]
	use_icon(choices) : "Use Icon" : 3 : "An icon that indicates when player can be able to open this door." = 
	[
		 0: "None"
		10: "Door (default)"
		58: "Door (player wanted)"
		59: "Door (transition)"
		12: "Wall switch"
		34: "Drop/Valve wheel"
		35: "Arrow/Stove's oven"
		 6: "Lootable container"
		73: "Pushable prop (-)"
	]
	locked_icon(choices) : "Locked Icon" : 3 : "An icon that indicates locked state of this entity." =
	[
		 0: "None"
		 3: "Default lock"
		54: "Electronic lock (locked)"
		58: "Door (player wanted)"
	]

	sep_dooradd1(string) readonly: "------------------------------------"

	// add prefs
	noopenwanted(choices) : "Block if Wanted" : 0 : "[VTMB] When player is wanted by cops, this door cannot be open." = [ 0: "No" 1: "Yes" ]
	lip(integer) : "Lip (inches)" : 0 : "The amount, in inches, of the door to leave sticking out of the wall it recedes into when open. Negative values make the door recede even further into the wall."
	// climbable(choices) -> func_door_rotating
	// use_override(target_destination) -> func_door
]

@BaseClass
= VDoorBase3
[
	// add prefs
	delay(integer) : "Delay (?)" : 0 : "[VTMB] Unknown yet..."

	sep_dooradd2(string) readonly: "------------------------------------"

	// physics
	dmg(integer) : "Blocking Damage" : 0 : "Amount of damage done to entities that block the movement of this door, per frame."
	health(integer) : "Door's Strength" : 0 : "Number of points of damage to take before door open. \n'0' = don't yield."

	// flags
	spawnflags(flags) =
	[
		1: "Starts Open" : 0
		4: "Non-solid to Player" : 0
		8: "Passable" : 0
	    32: "Toggle" : 0
		256: "Use Opens" : 1
		512: "NPCs Can't" : 0
		1024: "Touch Opens" : 0
		2048: "Starts Locked" : 0
		4096: "Door Silent" : 0
		8192: "Flag 8192 (unknown yet)" : 0
	]

	// inputs
	input Open(void) : "Open the door, if it is not fully open."
	input Close(void) : "Close the door, if it is not fully closed."
	input Toggle(void) : "Toggle the door between open and closed."
	input Lock(void) : "Lock the door."
	input Unlock(void) : "Unlock the door."
	input SetSpeed(float) : "Set the door speed."
	
	// outputs
	output OnClose(void) : "Fired when the door starts closing."
	output OnOpen(void) : "Fired when the door starts opening."
	output OnFullyOpen(void) : "Fired when the door reaches the fully open position. Reversed if 'Start Open' flag is set."
	output OnFullyClosed(void) : "Fired when the door reaches the fully closed position. Reversed if 'Start Open' flag is set."
	output OnBlockedClosing(void) : "Fired when the door is blocked while closing."
	output OnBlockedOpening(void) : "Fired when the door is blocked while opening."
	output OnUnblockedClosing(void) : "Fired when the door is unblocked while closing."
	output OnUnblockedOpening(void) : "Fired when the door is unblocked while opening."
	output OnLockedUse(void) : "Fired when the player uses the door, but it is locked."
]




//===================================================================================================================
// func_door [common]
//===================================================================================================================
// VTMB-adaptation:
//  moved: base(VDoor)
//  removed: movedir
//  removed: filtername (unused)
//  added: use_override

@BaseClass
= p_DoorMoveDir
[	// order fix
	angles(angle) : "Move Direction (Y Z X)" : "0 0 0" : "The direction the door will move, when it opens (Pitch Yaw Roll)."
]

@BaseClass
= p_DoorUseOverride
[	// order fix
	use_override(target_destination) : "Use Override Entity" : : "[VTMB] Unknown yet..."
]

@SolidClass
base (
	VDoorBase1,
	p_DoorMoveDir,
	VDoorBase2,
	p_DoorUseOverride,
	VDoorBase3,
	RenderFields
)
= func_door :
	"A brush entity for using as a player-useable door that moving along defined axis."
[
	soundgroup(choices) : "Sound Group" : "sliding_plywood" : "[VTMB] The group of sounds relative to 'sound/usable/openable/<groupname>/<action>.wav' that specifies open/close/swing/locked sounds." = []
]




//===================================================================================================================
// func_door_rotating [common]
//===================================================================================================================
// VTMB-adaptation:
//  moved: base(VDoor)
//  removed: solidbsp (unused)
//  added: climbable

@BaseClass
= p_DoorMoveDist
[	// order fix
	distance(choices) : "Moving Distance (degs)" : 90 : "The amount, in degrees, that the button should rotate when it's open." = [ 10:10 20:20 30:30 45:45 60:60 75:75 90:90 100:100 110:110 135:135 180:180 360:360 ]
]

@BaseClass
= p_DoorClimbable
[	// order fix
	climbable(choices) : "Door is Climbable" : 0 : "[VTMB] Determines, can player climb this door, or not [not tested fully - works?]." = [ 0: "No" 1: "Yes" ]
]

@SolidClass
base (
	VDoorBase1,
	p_DoorMoveDist,
	VDoorBase2,
	p_DoorClimbable,
	VDoorBase3,
	RenderFields
)
= func_door_rotating :
	"A brush entity for using as a rotating player-useable door." 
[
	spawnflags(flags) =
	[
		2 : "Reverse Dir" : 0
		16: "One-way" : 0
		64: "X Axis" : 0
		128: "Y Axis" : 0
	]
]
































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// AI Script Entities
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//====================================================================================================================
// CLASS: BaseScripted [common, HL2-based]
//====================================================================================================================
// VTMB-adaptaion:
//  removed: m_bLoopActionSequence (new)
//  removed: m_bSynchPostIdles (new)
//  removed: m_bIgnoreGravity (new)
//  removed: m_bDisableNPCCollisions (new)
//  removed: OnCancelSequence (new)
//  removed: OnCancelFailedSequence (new)
//  removed: m_iszEntry (unsup)
//  improved prefs sorting

@BaseClass
base (
	TargetnameRot,
	Parentname
)
color(255 0 255)
sphere(m_flRadius) = BaseScripted
[
	sep_bsmain(string) readonly: "------------------------------------"

	m_iszEntity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_VVampire') of an NPC to use for this script."
	m_flRadius(integer) : "Search Radius" : 512 : "Radius to search within for an NPC to use. \n'0' searches everywhere."

	sep_bsanims(string) readonly: "------------------------------------"

	m_iszPreIdle(string) : "Pre-Idle Initial Animation" :  : "[VTMB] The name of the sequence (such as 'ready01') or activity (such as 'ACT_READY') to play before pre-action animation if the NPC must wait for the script to be triggered. Not used on original maps [not tested]."
	m_iszIdle(string) : "Pre-Action Idle Animation" :  : "The name of the sequence (such as 'idle01') or activity (such as 'ACT_IDLE') to play before the action animation if the NPC must wait for the script to be triggered. \nUse 'Start on Spawn' flag or MoveToPosition input to play this idle animation."
	m_iszPlay(string) : "Action Animation" :  : "The name of the main sequence (such as 'reload02') or activity (such as 'ACT_RELOAD') to play."
	m_iszPostIdle(string) : "Post-Action Idle Animation" :  : "The name of the sequence (such as 'idle02') or activity (such as 'ACT_IDLE2') to play after the action animation."
	m_iszCustomMove(string) : "Custom Move Animation" :  : "Used in conjunction with the 'Custom movement' setting for the 'Move to Position' property, specifies the sequence (such as 'crouch_run01') or activity (such as 'ACT_RUN') to use while moving to the scripted position."

	sep_bsmisc1(string) readonly: "------------------------------------"

	m_flRepeat(integer) : "Repeat Rate (ms)" : 0
	m_fMoveTo(Choices) : "Move to Position" : 1 =
	[
		0 : "No"
		1 : "Walk"
		2 : "Run"
		3 : "Custom movement"
		4 : "Instantaneous"
		5 : "No - Turn to Face"
	]
	m_iszNextScript(target_destination) : "Next Script" : : "The name of the script to run immediately after this script completes. The NPC will not return to AI between the two scripts."

	sep_bsents(string) readonly: "------------------------------------"

	// Inputs
	input BeginSequence(void) : "Summons an NPC to act out the scripted sequence."
	input MoveToPosition(void) : "Summons an NPC to the script location. They will play their scripted idle (or ACT_IDLE if none is specified) until BeginSequence is triggered."
	input CancelSequence(void) : "Stops the scripted sequence. If fired after a sequence starts, this input will not take effect until the NPC finishes playing the scripted action animation."

	// Outputs
	output OnBeginSequence(void) : "Fires when the action animation begins playing."
	output OnEndSequence(void) : "Fires when the action animation completes."
	output OnScriptEvent01(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 1 } in the QC."
	output OnScriptEvent02(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 2 } in the QC."
	output OnScriptEvent03(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 3 } in the QC."
	output OnScriptEvent04(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 4 } in the QC."
	output OnScriptEvent05(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 5 } in the QC."
	output OnScriptEvent06(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 6 } in the QC."
	output OnScriptEvent07(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 7 } in the QC."
	output OnScriptEvent08(void) : "Fires when a 'trigger' anim event occurs while playing the script. Use { event 1003 framenum 8 } in the QC."
]






//====================================================================================================================
// aiscripted_schedule [common, HL2-based]
//====================================================================================================================
// VTMB adaptation:
//  removed: graball,interruptability (unsup)

@PointClass
base (
	Targetname
)
sphere(m_flRadius)
color(255 0 255)
iconsprite("editor/aiscripted_schedule")
= aiscripted_schedule :
	"Issues a command to an NPC without taking the NPC out of its AI. This does not seize control of the NPC as " +
	"a scripted_sequence does." 
[
	sep_aissmain(string) readonly: "------------------------------------"

	m_iszEntity(target_destination) : "Target NPC" : : "The name or class name (such as 'npc_VVampire') of an NPC to use for this script."
	m_flRadius(integer) : "Search Radius" : 0 : "Radius to search within for an NPC to use. \n'0' searches everywhere."

	sep_aisshent(string) readonly: "------------------------------------"

	forcestate(choices) : "AI State to Set" : 0 =
	[
		0 : "<None>"
		1 : "Set state to IDLE"
		2 : "Set state to ALERT"
		3 : "Set state to COMBAT"
	]	
	schedule(choices) : "Schedule to Run" : 1 =
	[
		0 : "<None>"
		1 : "Walk to Goal Entity"
		2 : "Run to Goal Entity"
		3 : "Set enemy to Goal Entity"
		4 : "Walk Goal Path"
		5 : "Run Goal Path"
		6 : "Set enemy to Goal Entity AND Run to Goal Entity"
	]
	goalent(target_destination) : "Goal Entity" : : "Provides the name of a schedule-specific goal entity (see 'Schedule to run')"

	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 0
		1024 : "Search Cyclically" : 0
		2048 : "Don't Complain" : 0
	]

	// Inputs
	input StartSchedule(void) : "Starts the scripted schedule. This will first locate an NPC that " +
		"matches the given target, then tell the NPC to run the specified schedule."
]






//===================================================================================================================
// scripted_sequence [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Angles (included)
//  removed: DXLevelChoice (unused)
//  removed: onplayerdeath (unsup)
//  added: radius (unkn)

@PointClass
base (
	BaseScripted
)
sphere(m_flRadius)
studio("models/editor/scriptedsequence.mdl")
= scripted_sequence :
	"Grabs an NPC and makes them play a specified set of animations. The NPC can be told to move to the scripted sequence position or can "+
	"be told to play the script wherever they currently are. "+
	"Multiple scripted sequences of the same name will frame-synchronize in the action animation once all the actors have moved to position. "+
	"This allows tight interaction between actors (one actor grabbing another, hitting them, etc.) The flow is as follows:\n\n"+
	"1) Move to position using the specified movement animation. If 'Move to Position' is set to NONE, skip to step 2.\n"+
	"2) If forced to wait for another actor to move to position, play the pre-action idle animation, otherwise skip to step 3. If there is no pre-action idle specified, ACT_IDLE is used.\n"+
	"3) Fire the OnBeginSequence output.\n"+
	"4) Play the action animation. If no action animation is specified, skip to step 5.\n"+
	"5) Play the post-action idle animation. If none is specified, skip to step 6. If the 'Loop in Post Idle' spawnflag is set, keep playing the post-action idle until the script is cancelled. If no post-action idle animation is specified, ACT_IDLE is used.\n"+
	"6) Fire the OnEndSequence output.\n"+
	"7) If a next script to play is specified, hand the NPC to the next script and repeat this process for that script.\n\n"+
	"The MoveToPosition input runs steps 1 and 2, then waits while playing the pre-action idle animation until the BeginSequence input is received.\n\n"+
	"If the sequence has motion extraction in it, set the 'Don't Teleport NPC On End' spawnflag."
[
	radius(integer) : "Sequence Radius (?)" : 10 : "[VTMB] Untested yet..."

	spawnflags(Flags) = 
	[
		4 : "Repeatable" : 0
		8 : "Leave Corpse" : 0
		16 : "Start on Spawn" : 0
		32: "No Interruptions" : 0
		64: "Override AI" : 0
		128: "Don't Teleport NPC On End" : 0
		256: "Loop in Post Idle" : 0
		512: "Priority Script" : 0
		4096: "Allow actor death" : 0
		8192: "Flag 8192 (unknown yet)" : 0
	]
]







































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// CAMERA Entities
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// sky_camera [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Angles,use_angles (unsup)

@PointClass
color(0 0 255)
studio("models/editor/camera.mdl")
size(-6 -6 -6, 6 6 6)
= sky_camera :
	"An entity used to control the 3D Skybox. \nIts origin is used to determine the 3D Skybox's position relative to the map. \nPlace this entity, in the 3D Skybox, at the point where the origin of the map should be."
[
	scale(integer) : "3D Skybox scale" : 16 : "Scale of 3D skybox."
	fogenable(choices) : "Enable Fog" : 0 = [ 0 : "No" 1 : "Yes" ]

	sep_scfog(string) readonly: "------------------------------------"

	fogstart(float) : "Fog Start Distance" : 500 : "Distance at which the skybox fog should start."
	fogend(float) : "Fog End Distance" : 5000 : "Distance at which the skybox fog should be fully opaque."
	fogcolor(color255) : "Fog Primary Color" : "255 255 255"
	fogcolor2(color255) : "Fog Secondary Color" : "255 255 255"
	fogdir(angle) : "Fog Primary Dir" : "1 0 0"
	fogblend(choices) : "Fog Blend" : 0 = [ 0 : "No" 1 : "Yes" ]
]




























	
	
	
	








//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// PARTICLE Effects
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: BModelParticleSpawner [common]
//===================================================================================================================
// VTMB-apaptation:
//  added: base(Tragetname,EnableDisable) (used by all)
//  improved descriptions

@BaseClass
base (
	Targetname,
	EnableDisable
)
= BModelParticleSpawner
[ 
	sep_bpsmain(string) readonly: "------------------------------------"

	Color(color255) : "Particle Color (R G B)" : "205 201 182"
	SpawnRate(integer) : "Particles Per Second" : 20 : "Number of particles to spawn, per second."
	SpeedMax(string) : "Maximum Particle Speed" : 2 : "Maximum speed that the particles can move after spawning."
	LifetimeMin(string) : "Minimum Particle Lifetime" : 3 : "Minimum number of seconds until each particle dies. Particles live for a random duration between this and 'Maximum Particle Lifetime'."
	LifetimeMax(string) : "Maximum Particle Lifetime" : 5 : "Maximum number of seconds until each particle dies. Particles live for a random duration between 'Minimum Particle Lifetime' and this."
	DistMax(integer) : "Maximum Visible Distance" : 1024 : "Maximum distance at which particles are visible. They fade to translucent at this distance."

	Frozen(choices) : "Freeze After First Cycle" : 0 : "When set, this entity spawns the number of particles in 'Particle Per Second' immediately, and then goes inactive." =
	[
		0 : "No"
		1 : "Yes"
	]

	sep_bpsent(string) readonly: "------------------------------------"

	// Inputs
	input TurnOn(void) : "Turn on."
	input TurnOff(void) : "Turn off."
]



//====================================================================================================================
// env_laser [common]
//====================================================================================================================

@PointClass base(Targetname,Parentname,p_RenderFxChoices) size(-4 -4 -4, 4 4 4) line(255 255 255, targetname, LaserTarget) = env_laser : 
	"An entity that creates a laser beam between itself and a given target."
[
	LaserTarget(target_destination) : "Target of Laser" : : "Name of entity or entities to strike at, randomly chosen if there are multiple entities with the given name."
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "255 255 255"
	width(float) : "Width of beam in pixels" : 2
	NoiseAmplitude(integer) : "Amount of noise (0-255)" : 0
	texture(sprite) : "Sprite Name" : "sprites/beama.vmt"
	EndSprite(sprite) : "End Sprite" : ""
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35
	framestart(integer) : "Starting Frame" : 0
	damage(string) : "Damage / second" : "100" : "How much damage this laser does per second to things it hits."
	spawnflags(flags) = 
	[
		1 : "Start On" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
	]

	// Inputs
	input TurnOn(void) : "Turns the laser on."
	input TurnOff(void) : "Turns the laser off."
	input Toggle(void) : "Toggles the laser between on and off."
]



//===================================================================================================================
// env_physexplosion [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: inner_radius (new)
//  removed: OnPushedPlayer (new)
//  removed: SpawnFlags(8) (unsup)

@PointClass
base (
	Targetname,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
sphere(radius)
iconsprite("editor/env_physexplosion.vmt")
= env_physexplosion :
	"An entity that creates an explosion at its origin. If the no-damage spawnflag is set, the explosion won't be visible, but will apply force to any physics objects within its radius."
[
	sep_pemain(string) readonly: "------------------------------------"

	magnitude(string) : "Magnitude" : 500 : "Amount of physics force applied by the explosion."
	radius(string) : "Clamp Radius (0=auto)" : 0 : "If specified, the radius in which the explosion damages entities. \nIf unspecified, the radius will be based on the magnitude."
	targetentityname(target_destination) : "Limit to Entity" :  : "If specified, the explosion will only affect the matching entity."

	spawnflags(flags) =
	[
		1 : "No Damage - Only Force" : 1
		2 : "Push players" : 0
		4 : "Push radially - not as a sphere" : 0
		16 : "Disorient player if pushed" : 0
	]

	// Inputs
	input Explode(void) : "Trigger the explosion."
]



//===================================================================================================================
// func_dustmotes [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: SpriteName

@SolidClass base(BModelParticleSpawner) = func_dustmotes : 
	"A brush entity that spawns sparkling dust motes within its volume. \nProbably doesn't work in VtMB (use func_particle instead)."
[
	SizeMin(string) : "Minimum Particle Size" : 7
	SizeMax(string) : "Maximum Particle Size" : 12
	Alpha(integer) : "Particle Alpha" : 100
// vtmb ----
	SpriteName(sprite) : "Sprite Name" : "particle/sparkles.vmt" : "[VTMB] Material of the sprite to be drawn."
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// ENVIRONMENTAL Effects
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: gibshooterbase [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: gibanglevelocity (new)
//  removed: lightingorigin (new)
//  removed: gibangles (unsup)

@BaseClass
base (
	Targetname,
	Parentname
) = GibShooterBase
[
	sep_gsmain(string) readonly: "------------------------------------"

	angles(angle) : "Gib Direction (Y Z X)" : "0 0 0" : "The direction the gibs will fly."
	m_iGibs(integer) : "Number of Gibs" : 8 : "Total number of gibs to shoot each time it's activated."
	delay(string) : "Delay between shots" : 0 : "Delay (in seconds) between shooting each gib. \nIf 0, all gibs shoot at once."
	m_flVelocity(integer) : "Gib Velocity" : 200 : "Speed of the fired gibs"
	m_flVariance(string) : "Course Variance" : "0.25" : "How much variance in the direction gibs are fired."
	m_flGibLife(string) : "Gib Life" : 4 : "Time in seconds for gibs to live +/- 5%"

	spawnflags(Flags) = 
	[
		1 : "Repeatable"  : 0
	]

	// Inputs
	input Shoot(void) : "Force the gibshooter to create and shoot a gib."
]




//===================================================================================================================
// env_beam [common]
//===================================================================================================================
// VTMB-adaptation:
//  changed: texture("materials/sprites/beama.vmt")
//  removed: filtername (new)
//  removed: HDRColorScale (new)
//  removed: decalname (new)
//  removed: TouchType,OnTouchedByEntity (unsup)
//  mark as unsupported: some io's
//  resorted parameters

@PointClass
base (
	Targetname,
	Parentname,
	p_RenderFxChoices
)
line (
	255 255 255,
	targetname,
	parentname
)
line (
	255 255 0,
	targetname,
	LightningStart,
	targetname,
	LightningEnd
)
color(0 224 192)
size(-4 -4 -4, 4 4 4)
= env_beam :
	"An entity that creates a visible beam between two points. The points can be attached to entities to make the beam move around."
[
	renderamt(integer) : "Brightness (1 - 255)" : 100
	rendercolor(color255) : "Beam Color (R G B)" : "255 255 255"

	sep_beam1(string) readonly: "------------------------------------"

	LightningStart(target_destination) : "Starting Entity" : "" : "Entity that the beam starts at."
	LightningEnd(target_destination) : "Ending Entity" : "" : "Entity that the beam ends at."

	Radius(integer) : "Radius" : 256 : "If the 'Random Strike' spawnflag is set, this radius determines the area within which the endpoints will randomly strike."
	life(float) : "Life (seconds, 0=infinite)" : 0 : "Amount of time before the beam dies. Setting to zero will make the beam stay forever. \n'0' means infinite."
	BoltWidth(float) : "Width of beam" : 6 : "Pixel width of the beam."
	NoiseAmplitude(float) : "Amount of noise (0-255)" : 15 : "The amount of noise in the beam. 0 is a perfectly straight beam."

	sep_beam2(string) readonly: "------------------------------------"

	texture(sprite) : "Sprite Name" : "materials/sprites/beama.vmt" : "The material used to draw the beam."
	TextureScroll(integer) : "Texture Scroll Rate (0-100)" : 35 : "Rate at which the beam texture should scroll along the beam."
	framerate(integer) : "Frames per 10 seconds" : 0 : "Framerate at which the beam texture should animate, if it has multiple frames."
	framestart(integer) : "Starting Frame" : 0 : "The frame to start the beam texture on."
	StrikeTime(float) : "Strike again time (secs)" : 2 : "Refire time between random strikes of the beam. Only used if the 'Random Strike' spawnflag is set."

	sep_beam3(string) readonly: "------------------------------------"

	damage(float) : "Damage / second" : 0 : "How much damage this beam does per second to things it hits when it is continually on, or instantaneously if it strikes. \nFor continuous damage, the value should be greater than 10 or it may not work."
	impact_particle(choices) : "Impact Particle" : "particles/Sparks_Warrens_Computers_emitter.txt" : "[VTMB] Particle spawned on impact [not tested]." = []
	faces_player(choices) : "Faces Player" : 1 : "[VTMB] Take damage to player? [not tested]" = [ 0: "No" 1: "Yes" ]

	spawnflags(flags) = 
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Random Strike" : 0
		8 : "Ring" : 0
		16: "StartSparks" : 0
		32: "EndSparks" : 0
		64: "Decal End" : 0
		128: "Shade Start" : 0
		256: "Shade End" : 0
		512: "Taper Out" : 0
	]
	
	// Inputs
	input TurnOn(void) : "Turns the beam on."
	input TurnOff(void) : "Turns the beam off."
	input Toggle(void) : "Toggles the beam between on and off."
	input StrikeOnce(void) : "Causes the beam to strike once. It will stay on for its set Life and then turn off (it will never turn off if Life is set to zero)."
	input Alpha(integer) : "Sets the beam's alpha (0 - 255)."
	input Color(color255) : "Sets the beam's render color (R G B)."
	input Amplitude(float) : "Set the amplitude of beam noise (0 - 255)."
	input ScrollSpeed(float) : "Set the scroll speed in units per second (0 - 100)."
	input Width(float) : "Set the width of the beam, in pixels."
	input Noise(float) : "[VTMB] Set amount of noise? [not tested]."
]




//===================================================================================================================
// env_cubemap [common]
//===================================================================================================================
// not changed.

@PointClass
color(0 0 255)
sidelist(sides)
iconsprite("editor/env_cubemap.vmt")
= env_cubemap :
	"An entity that creates a sample point for the Cubic Environment Map."
[
	cubemapsize(choices) : "Cubemap Size" : 0 =
	[
		0 : "Default"
		1 : "1x1"
		2 : "2x2"
		3 : "4x4"
		4 : "8x8"
		5 : "16x16"
		6 : "32x32"
		7 : "64x64"
		8 : "128x128"
		9 : "256x256"
	]
	sides(sidelist) : "Brush faces" : : "(Optional) Brushes faces to directly attach to the env_cubemap. \nPress Pick then click on faces in the 3D View to select them. \nUse CTRL while clicking to add or remove from the selection."
]




//===================================================================================================================
// env_fade [common]
//===================================================================================================================
// not changed.

@PointClass
base (
	Targetname
)
iconsprite("editor/env_fade")
= env_fade :
	"An entity that controls screen fades."
[
	sep_fade(string) readonly: "------------------------------------"

	duration(string) : "Duration (seconds)" : "2.0" : "The time that it will take to fade the screen in or out."
	holdtime(string) : "Hold Fade (seconds)" : "1.0" : "The time to hold the faded in/out state."
	renderamt(integer) : "Fade Alpha" : 255 : "Alpha of the fade, where 0 = fully transparent and 255 = fully opaque." 
	rendercolor(color255) : "Fade Color (R G B)" : "0 0 0"

	spawnflags(flags) =
	[
		1: "Fade From" : 0
		2: "Modulate" : 0
		8: "Stay Out" : 0
	]

	// Inputs
	input Fade(void) : "Start the screen fade."

	// Outputs
	output OnBeginFade(void) : "Fired when the fade has begun."
]




//====================================================================================================================
// env_fog_controller [common]
//====================================================================================================================
// VTMB-adaptation
//	removed: angles (unused)
//  removed: DXLevelChoice (unused)
//	removed: fogblend (moved to worldspawn)
//	removed: fogcolor/2 (moved to worldspawn)
//	removed: fogdir (moved to worldspawn)
//	removed: fogenable (moved to worldspawn)
//	removed: fogstart/end (moved to worldspawn)
//	removed: farz (moved to worldspawn)

@PointClass base(Targetname) iconsprite("editor/fog_controller.vmt") color(255 255 255) = env_fog_controller : 
	"An entity that controls the fog and view distance in the map. \nIn VtMB all Fog values moved to Map properties (worldspawn), so using env_fog_controller you just may control them in real time via inputs."
[
	targetname(target_source) : "Name" : "fog_controller" : "The name that other entities refer to this entity by."

	// Inputs
	input SetStartDist(float) : "Sets fog start distance"
	input SetEndDist(float) : "Sets fog end distance"
	input TurnOn(void) : "Turns fog on"
	input TurnOff(void) : "Turns fog off"
	input SetColor(color255) : "Sets primary fog color."
	input SetColorSecondary(color255) : "Sets secondary fog color."
]





//===================================================================================================================
// env_physimpact [common]
//===================================================================================================================
// VTMB-adaptation:
//  fixed: angles(angle),desc
//  added: target_position
//  added: Origin

@PointClass
base (
	Targetname,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
line (
	255 255 0,
	targetname,
	directionentityname
)
halfgridsnap
iconsprite("editor/env_physexplosion.vmt")
= env_physimpact : 
	"An entity that will cause a physics impact on another entity."
[
	sep_pimain(string) readonly: "------------------------------------"

	angles(angle) : "Impact Angles (Y Z X)" : "0 0 0" : "Direction to project the impact."
	magnitude(integer) : "Magnitude" : 50 : "Strength of the impact."
	distance(integer) : "Distance" : 64 : "How far to project the impact (if 0 uses a default value)."
	target_position(vecline) : "Target Position (X Y Z)" :  : "[VTMB] Position (world's origin) that impact will be projected? [not tested]."
	directionentityname(target_destination) : "Point to Entity" :  : "If set, 'Distance' and Angle settings are ignored and the direction and distance to the target entity will be used. \n[VTMB] Target Position too [not tested]?"

	spawnflags(flags) =
	[
		1: "No fall-off" : 0
		2: "Infinite Length" : 0
		4: "Ignore Mass" : 0
		8: "Ignore Surface Normal When Applying Force" : 1
	]

	// Inputs
	input Impact(void) : "Trigger the impact"
]






//===================================================================================================================
// env_shake [common]
//===================================================================================================================
// VTMB-adaptation:
//  changed default values

@PointClass
base (
	Targetname,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
sphere()
iconsprite("editor/env_shake.vmt")
= env_shake :
	"An entity to control screen shake on players." 
[
	sep_shkmain(string) readonly: "------------------------------------"

	amplitude(float) : "Amplitude (0-16)" : 4 : "The amount of noise in the screen shake. Should be a range between 0 and 16."
	radius(float) : "Effect Radius" : 256 : "The radius around this entity in which to affect players."
	duration(float) : "Duration (seconds)" : 1 : "The length of time in which to shake the player's screens."
	frequency(float) : "Frequency" : "2.5" : "The frequency used to apply the screen shake. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."

	spawnflags(flags) =
	[
		1: "GlobalShake" : 0
		4: "In Air" : 0		// shakes objects even if they are not onground
		8: "Physics" : 0	// shakes physically as well as the camera
	 // FixMe: works in vtmb?
		16: "Ropes" : 0		// shakes ropes too.
		32: "DON'T shake view (for shaking ropes or physics only)" : 0
		64: "DON'T Rumble Controller" : 0
	]

	// Inputs
	input Amplitude(string) : "Set the amplitude (0-16)"
	input Frequency(string) : "Set the frequence. Should be a value between 0 and 255, where 0.1 = jerk, and 255.0 = rumble."
	input StartShake(void) : "Start the shake."
	input StopShake(void) : "Stop the shake."
]






//===================================================================================================================
// env_shooter [common]
//===================================================================================================================
// VTMB-adaptation:
//  replaced: shootmodel("models/gibs/metalgibs.mdl")
//  removed: gibgravityscale (new)
//  removed: massoverride (new)
//  removed: nogibshadows (unsup)

@BaseClass
= e_env_shooter
[
	sep_shkent(string) readonly: "------------------------------------"

	shootmodel(studio) : "Shooter Model" : "models/gibs/metalgibs.mdl" : "Thing to shoot out. Can be a .mdl or a .vmt."
	shootsounds(choices) :"Material Sound" : -1 =
	[
		-1: "None"
		0: "Glass"
		1: "Wood"
		2: "Metal"
		3: "Flesh"
		4: "Concrete"  
	]
	simulation(choices) :"Simulate" : 0 =
	[
		0: "Point"
		1: "Physics"
		2: "Ragdoll"
	]
	skin(choices) : "Gib Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin on all gibs produced by this shooter." =
	[ 0:0 1:1 2:2 3:3 4:4 5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 16:16 17:17 18:18 19:19 20:20 21:21 22:22 23:23 24:24 25:25 26:26 27:27 28:28 29:29 30:30 31:31 ]

	spawnflags(flags) =
	[
		2 : "On fire" : 0
		4 : "Strict remove after lifetime" : 0
		1 : "Flag 1 (unknown yet)" : 0
	]
]


@PointClass
base (
	GibShooterBase,
	e_env_shooter,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
iconsprite("editor/env_shooter.vmt")
= env_shooter :
	"An entity that shoots models, or sprites, out of its origin."
[
	// RF order fix
]







//===================================================================================================================
// env_spark [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: new io's

@PointClass
base (
	TargetnameRot,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
iconsprite("editor/env_spark.vmt")
= env_spark :
	"An entity used to create sparks at its origin." 
[
	sep_sprkmain(string) readonly: "------------------------------------"

	MaxDelay(string) : "Max Delay" : 0 : "The longest delay between sparks (in seconds)."
	Magnitude(choices) : "Magnitude" : 1 : "The size of the sparks." =
	[
		1 : "Small"
		2 : "Medium"
		5 : "Large"
		8 : "Huge"
	]
	TrailLength(choices) : "Spark Trail Length" : 1 =
	[
		1 : "Short"
		2 : "Medium"
		3 : "Long"
	]

	spawnflags(flags) =
	[
		64: "Start On" : 0
		128: "Glow" : 0
		256: "Silent" : 0
		512: "Directional" : 0
	]
	
	// Inputs
	input StartSpark(void) : "Start the spark effect."
	input StopSpark(void) : "Stop the spark effect."
	input ToggleSpark(void) : "Toggle the on/off state of the spark effect."
	input SparkOnce(void) : "Spark once."
	
	// Outputs
	output OnSpark(void) : "[VTMB] Fired when the spark effect started."
]






//===================================================================================================================
// env_sprite [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: spawnflag (4)
//  added: base(Angles) (used)
//  removed: DXLevelChoice (unused)
//  removed: GlowProxySize (new)
//  removed: HDRColorScale (new)
//  removed: Color*Value (new)
//  added: new io's
//  fix: disableshadows = 1

@PointClass
base (
	TargetnameRot,
	Parentname,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
size(-2 -2 -2, 2 2 2)
sprite()
color(20 140 20)
= env_sprite :
	"An entity that controls the drawing of a sprite in the world." 
[
	disableshadows(choices) : "Disable Shadows" : 1 : "Disables shadow casing from this sprite." = [ 0 : "No" 1 : "Yes" ]
	sep_sprtmain(string) readonly: "------------------------------------"

	framerate(float) : "Framerate" : "10.0" : "Rate at which the sprite should animate, if at all."
	model(sprite) : "Sprite Name" : "sprites/glowa.vmt" : "Material of the sprite to be drawn. \n\nYou can also use models."
	scale(float) : "Sprite Scale" : "1.0" : "Scale multiplier of the sprite."

	spawnflags(flags) =
	[
		1: "Start On" : 0
		2: "Play Once" : 0
		4: "Flag 4 (unknown yet)" : 0
	]

	// Inputs
	input Alpha(integer) : "Sets the sprite's alpha (0 - 255)."
	input Color(color255) : "Sets the sprite's color (R G B)."
	input HideSprite(void) : "Hide the sprite. Won't be drawn until the 'ShowSprite' input is received."
	input SetScale(float) : "Set the sprite's scale (0 - 8.0)."
	input ShowSprite(void) : "Show the sprite."
	input ToggleSprite(void) : "Toggle the sprite between hidden and shown."
 // vtmb
	input TurnOn(void) : "[VTMB] Set state of sprite to On."
	input TurnOff(void) : "[VTMB] Set state of sprite to Off."
	input Toggle(void) : "[VTMB] Toggle the sprite between hidden and shown."
]





//===================================================================================================================
// env_steam [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: rollspeed (new)

@PointClass
base (
	TargetnameRot,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
color(255 255 255)
studioprop("models/editor/spot_cone.mdl")
= env_steam :
	"An entity used to create a jet of steam."
[
	sep_stmmain(string) readonly: "------------------------------------"

	InitialState(choices) : "Initial State" : 1 = 
	[
		0 : "Off"
		1 : "On"
	]

	//Type of particle to spew out
	type(choices) : "Particle Type" : 0 =
	[
		0 : "Normal"
		1 : "Heat Wave"
	]
	Rate(integer) : "Emission rate" : 26 : "The rate of particle emission. i.e. particles per second."
	Speed(integer) : "Speed" : 120 : "The default speed at which the particles move after they spawn."
	SpreadSpeed(integer) : "Spread Speed" : 15 : "The amount of random spread in the particle's velocity after they spawn."
	JetLength(integer) : "Length of steam jet" : 80 : "The length of the jet determines the lifetime of each particle."

	sep_stmappr(string) readonly: "------------------------------------"

	StartSize(integer) : "Particle start size" : 10 : "The initial size of the particles after they spawn."
	EndSize(integer) : "Particle end size" : 10 : "The size of the particles at the point at which they are removed."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	renderamt(integer) : "Translucency (0-255)" : 100

	spawnflags(flags) =
	[
		1 : "Emissive" : 0
	]
	
	// Inputs
	input TurnOn(void) : "Turns the steam jet on."
	input TurnOff(void) : "Turns the steam jet off."
	input Toggle(void) : "Toggles the steam jet between on and off."
	input JetLength(integer) : "Sets the length of steam jet."
	input Rate(integer) : "Sets the particle emission rate in particles per second."
	input Speed(integer) : "Sets the default speed of the particles in units per second."
	input SpreadSpeed(integer) : "Sets the spread speed in units per second."
]





//====================================================================================================================
// env_sun [common]
//====================================================================================================================
// not changed.

@PointClass
base(
	TargetnameRot
)
color(255 0 0)
= env_sun :
	"An entity to control & draw a sun effect in the sky."
[
	target(target_destination)	: "Viewer entity" : : "Name of an entity used to determine where the sun is in the skybox. The sun should be lined up on a line from this entity to the env_sun entity."
	rendercolor(color255)		: "Sun Color (R G B)" : "100 80 80"
	NumLayers(integer)			: "Number of layers" : 3
	HorzSize(integer)			: "Horizontal size of sun"	: 120
	VertSize(integer)			: "Vertical size of sun"	: 100

	input TurnOn(void)			: "Enable sun rendering"
	input TurnOff(void)			: "Disable sun rendering"
	input SetColor(color255)	: "Change the sun's color"
]






































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// FILTERS
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: BaseFilter [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Negated
//  added: reverse_outcome ('negated' analogue)

@BaseClass
base (
	Targetname
)= BaseFilter
[
	sep_fltmain(string) readonly: "------------------------------------"

	reverse_outcome(choices) : "Reverse Outcome" : 0 : "[VTMB] Whether to reverse the result of the subfilters, after combining them using the Logic Type chosen [not tested]. \n"+
		"Reversing the outcome using the AND logic type means that any subfilter must fail for this filter to pass. \n"+
		"Reversing the outcome using the OR logic type means that all subfilters must fail for this filter to pass." =
	[
		0 : "No"
		1 : "Yes"
	]

	// Inputs
	input TestActivator(void) : "Test the activator against the filter and fires OnPass or OnFail output."

	// Outputs
	output OnPass(void) : "Fired in response to TestActivator input if the activator passes the filter."
	output OnFail(void) : "Fired in response to TestActivator input if the activator fails to pass the filter."
]



//===================================================================================================================
// filter_activator_class [common]
//===================================================================================================================
// VTMB-adaptation:
//  changed: filterclass value

@FilterClass
base (
	BaseFilter
)
iconsprite("editor/filter_class.vmt")
= filter_activator_class :
	"A filter that filters by the class name of the activator."
[
	filterclass(filterclass) : "Filter Class Name" :  : "The class name to filter by. If the filter mode is Allow, only entities whose "+
		"class name matches the given string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose class name matches the given string will pass the filter."
]



//===================================================================================================================
// filter_activator_name [common]
//===================================================================================================================

@FilterClass
base (
	BaseFilter
)
iconsprite("editor/filter_name.vmt")
= filter_activator_name :
	"A filter that filters by the name of the activator."
[
	filtername(target_destination) : "Filter Name" : : "The name to filter by. If the filter mode is Allow, only entities whose "+
		"name matches the given string will pass the filter. If the filter mode is Disallow, "+
		"all entities EXCEPT those whose name matches the string will pass the filter."
]



//===================================================================================================================
// filter_multi [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Negated (new)

@FilterClass
base (
	BaseFilter
)
iconsprite("editor/filter_multiple.vmt")
= filter_multi :
	"A filter that tests the activator against multiple filters. This allows you to build more complex filters, such as"+
	"'Allow anyone on Team 1 who is also class engineer', or 'Allow everyone except classes npc_VZombie and npc_VTzimisce'."
[
	filtertype(choices) : "Logic Type" : 0 =
	[
		0 : "AND (all filters must pass)"
		1 : "OR (any filter must pass)"
	]
	
	sep_fltflts(string) readonly: "------------------------------------"
	Filter01(filterclass) : "Filter 1" : : "Activator filter to test."
	Filter02(filterclass) : "Filter 2" : : "Activator filter to test."
	Filter03(filterclass) : "Filter 3" : : "Activator filter to test."
	Filter04(filterclass) : "Filter 4" : : "Activator filter to test."
	Filter05(filterclass) : "Filter 5" : : "Activator filter to test."
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// FUNCTION Entities
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// func_areaportal [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: PortalVersion (unsup)

@SolidClass
base (
	Targetname
)
color(0 255 255)
= func_areaportal :
	"A portal brush used to manage visibility in maps. Portals define areas, which are spaces " +
	"that are connected in the map. Both sides of a portal cannot touch the same area, for example, a " +
	"doughnut shaped map would require at least two portals to divide the map into two areas. A linear map " +
	"could be divided into two areas with a single area portal."
[
	sep_aptmain(string) readonly: "------------------------------------"
	target(target_destination) : "Name of Linked Door" : : "(Optional) The name of a door whose open/closed state controls the on/off state of this area portal."
	StartOpen(choices) : "Initial State" : 0 =
	[
		0 : "Closed"
		1 : "Open"
	]
 
	// Inputs
	input Open(void) : "Open the portal. When the portal is open is can be seen through."
	input Close(void) : "Close the portal. When the portal is closed it cannot be seen through."
	input Toggle(void) : "Toggle the open/closed state of the portal."
]




//===================================================================================================================
// func_areaportalwindow [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: PortalVersion (new)
//  removed: Inputs (new)
//  changed: Fade*Dist(choices)

@SolidClass
base (
	Targetname
)
color(0 128 255)
= func_areaportalwindow :
	"An entity that can be used to optimize the visibility in a map. \n"+
	"If you seal off an area with them, when the viewer moves the specified distance away from them, they will go opaque and the parts inside the area will not be drawn. \n"+
	"The 'target' brush model should enclose the func_areaportal window so no parts of it are culled by the window. \n"+
	"If you use the optional foreground brush model, then it should enclose the 'target' brush model."
[
	sep_apwmain(string) readonly: "------------------------------------"

	target(target_destination)  : "Rendered Window" : : "The name of a brush model to render as the window."
	FadeStartDist(choices) : "Fade Start Distance" : 384 : "When the viewer is closer than this distance, the alpha is set to 'TranslucencyLimit'." =
	[
		16 : 16
		32 : 32
		64 : 64
		96 : 96
		128 : 128
		192 : 192
		256 : 256
		384 : 384
		512 : 512
		768 : 768
	]
	FadeDist(choices) : "Fade End Distance" : 768 : "When the viewer is at this distance, the portal becomes solid and closes off." =
	[
		32 : 32
		64 : 64
		96 : 96
		128 : 128
		192 : 192
		256 : 256
		384 : 384
		512 : 512
		768 : 768
		1024 : 1024
	]

	sep_apwadds(string) readonly: "------------------------------------"
	TranslucencyLimit(string) : "Translucency Limit"  : "0.0" : "This value limits the translucency of the bmodel and prevents it from becoming invisible when the viewer is right on top of it."
	BackgroundBModel(target_destination) : "Foreground Brush" :  : "(Optional) brush model that is drawn after the fading brush model. This model should have alpha in its textures so you can see through it."
]






//===================================================================================================================
// func_brush [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Shadow (included)
//  removed: excludednpc (new)
//  removed: invert_exclusion (new)
//  removed: solidbsp (new)
//  removed: vrad_brush_cast_shadows (new)
//  removed: spawnflags (new)
//  removed: inputs (new)
//  added: new io's

@BaseClass
= e_func_brush
[
	sep_brshmain(string) readonly: "------------------------------------"

	Solidity(choices) : "Solidity" : 0 : "Used to control the solidity/collision of these brushes." =
	[
		0 : "Toggle"
		1 : "Never Solid"
		2 : "Always Solid"
	]
	climbable(choices) : "Brush is Climbable" : 0 : "[VTMB] Determines, can player climb to this brush, or not." = [ 0 : "No" 1 : "Yes" ]
	
	InputFilter(choices) : "Input Filter" : 0 : "Used to specify which inputs this entity will accept." =
	[
		0 : "Allow all inputs"
		8 : "Ignore Touch/Untouch"
		16 : "Ignore Use"
		32 : "Ignore All"
	]

	// inputs
	input Toggle(void) : "[VTMB] Toggle this brush state between enabled and disabled."
]

@SolidClass
base (
	Targetname,
	Parentname,
	p_Global,
	EnableDisable,
	e_func_brush,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_brush :
	"An brush built entity with various features.\n"+
	"[VTMB] Adds additional properties to object that it would not normally have. \nFor example, makes something climbable, or usable or solid that is not normally so (e.g. making a cat statue usable)."
[
	sep_brshorig(string) readonly: "------------------------------------"
	origin(string) : "Origin (X Y Z)" : : "The position of this entity's center in the world. Rotating entities typically rotate around their origin. \n\nWarning: if the current brush used as func_areaportalwindow's rendering target, it's necessarily to leave Origin values to be empty, or set it to 0 0 0!"
]







//===================================================================================================================
// func_detail [common]
//===================================================================================================================
// not changed.

@SolidClass
color(0 180 0)
= func_detail :
	"An entity that turns its brushes into detail brushes. Detail brushes do NOT contribute to visibility in the PVS. World geometry "+
	"is not clipped to detail brushes, so if you have a small detail clump attached to a wall, the wall won't be cut up by the detail brush. "+
	"func_detail is great for high-frequency brush geometry that's visual detail only. It is also ideal for reducing map VIS time."
[
]







//===================================================================================================================
// func_illusionary [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: minlight (unsup)

@SolidClass
base (
	Targetname,
	Parentname,
	p_Origin,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_illusionary :
	"Fake Wall/Light with no collision."
[
]







//===================================================================================================================
// func_ladder [common]
//===================================================================================================================
// not changed.

@SolidClass
color(180 180 0)
= func_ladder :
	"An entity that turns its brushes into ladder brushes. Player may climb it."
[
]







//===================================================================================================================
// func_lod [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@SolidClass
base (
	Targetname
)
sphere(DisappearDist)
= func_lod :
	"Brush-built model that fades out over a specified distance. Useful for creating world detail that doesn't need to be drawn far away, for performance reasons."
[
	DisappearDist(integer)    : "Disappear Distance" : 2000 : "Distance at which these brushes should fade out."
	Solid(choices) : "Solid" : 0 : "Set whether or not these brushes should collide with other entities." =
	[
		0: "Solid"
		1: "Non-Solid"
	]
]









//===================================================================================================================
// func_monitor [common, HL2-based]
//===================================================================================================================
// VTMB-adaptation:
//  added: desc.note
//  added: view_entity
//  added: spawnflags

@BaseClass
halfgridsnap
= e_func_monitor
[
	sep_monmain(string) readonly: "------------------------------------"

	origin(vecline) : "Look Origin" : : "World's 'X Y Z' origin that defined player's look position when he's using this monitor."
	target(target_destination) : "Camera Name" : : "Name of camera entity that will translate picture on this monitor."
	view_entity(target_destination) : "View Entity" : : "[VTMB] Entity to view and manage, e.g. TV set [not tested]."

	spawnflags(flags) =
	[
		1: "Flag 1 (unknown yet)" : 0
	]

	// Inputs
	input SetCamera(string) : "Override the camera to use for this monitor. Takes the name of a point_camera entity in the map."
]

@SolidClass
base (
	Targetname,
	Parentname,
	p_Origin,
	p_Global,
	EnableDisable,
	e_func_monitor,
	e_func_brush,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_monitor :
	"A monitor that renders the view from a given point_camera entity. \n"+
	"[VTMB] This plugin connects a monitor prop to a camera and enables turning it on or off."
[
	// RF order fix
]








//===================================================================================================================
// func_movelinear [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: outputs (new)
//  removed: movedir (->angles)
//  added: new spawnflags
//  added: loopsound
//  added: new io's
//  improved descriptions

@SolidClass
base (
	Targetname,
	Parentname,
	p_Origin
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_movelinear :
	"A brush entity that moves linearly along a given distance, in a given direction."
[
	sep_mlmain(string) readonly: "------------------------------------"

	angles(angle) : "Move Direction (Y Z X)" : "-90 0 0" : "The direction the brushes will move, when told to."
	movedistance(float) : "Move Distance (Inches)" : 50 : "The distance from the starting point that the brush should move, in inches."
	speed(integer) : "Move Speed (Inch/sec)" : 20 : "The speed that the brush moves, in inches per second."
	startposition(float) : "Start Position (0-1)" : 0 : "Position of brush when spawned. \nThe range is a value between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."	

	sep_mlsnds(string) readonly: "------------------------------------"

	startsound(sound) : "Start Sound" :  : "Sound played when the brush starts moving. \nClick down arrow if you want to choice default sounds." =
	[
		"area/special/observatory/observation_doors_start_1.wav" : "Area/Special/Observatory/Observation_Doors_Start_1.wav"
		"usable/openable/metal_heavy_powered/open.wav" : "Usable/Openable/Metal_Heavy_Powered/Open.wav"
		"usable/openable/sliding_plywood/swing.wav" : "Usable/Openable/Sliding_Plywood/Swing.wav"
		"environmental/machines/elevator_operate.wav" : "Environmental/Machines/Elevator_Operate.wav"
	]
	stopsound(sound) : "Stop Sound" :  : "Sound played when the brush stops moving. \nClick down arrow if you want to choice default sounds." =
	[
		"area/special/observatory/observation_doors_stop_1.wav" : "Area/Special/Observatory/Observation_Doors_Stop_1.wav"
		"usable/openable/metal_heavy_powered/close.wav" : "Usable/Openable/Metal_Heavy_Powered/Close.wav"
		"usable/openable/sliding_plywood/close.wav" : "Usable/Openable/Sliding_Plywood/Close.wav"
		"environmental/machines/elevator_stop.wav" : "Environmental/Machines/Elevator_Stop.wav"
	]
	loopsound(sound) : "Movement Sound" :  : "[VTMB] Sound played when the brush moves. \nClick down arrow if you want to choice default sounds." =
	[
		"area/special/observatory/observation_doors_loop_1.wav" : "Area/Special/Observatory/Observation_Doors_Loop_1.wav"
		"usable/openable/metal_heavy_powered/swing.wav" : "Usable/Openable/Metal_Heavy_Powered/Swing.wav"
		"surfaces/concrete/scrape1.wav" : "Surfaces/Concrete/Scrape1.wav"
	]

	sep_mlmisc(string) readonly: "------------------------------------"

	blockdamage(float) : "Block Damage" : 0 : "The amount of damage to do to any entity that blocks the brushes, per frame."
	
	spawnflags(flags) =
	[
		8 : "Not Solid" : 0
		32 : "Flag 32 (unknown yet)" : 0
		256 : "Flag 256 (unknown yet)" : 0
	]

	// Inputs
	input Open(void) : "Move the brush to the end position (starting position + (move direction * move distance)) [not tested]."
	input Close(void) : "Move the brush to the starting position [not tested]."

	// inputs
	input StartMoving(void) : "[VTMB] Start brush moving."
	input StopMoving(void) : "[VTMB] Stop brush moving."
	input ToggleMovement(void) : "[VTMB] Toggle movement between start and stop."
	input SetPosition(float) : "Move the brush to a specific position between 0.0 and 1.0, where 0 is the starting position and 1 is the starting position + (move direction * move distance)."
	input SetSpeed(float) : "Set the speed and update immediately."

	// outputs
	output Position(integer) : "[VTMB] Fired whenever the brush moves. The output is the position of brush from 0 to 1..."
	output OnStop(void) : "[VTMB] Fired when brush stopped its moving."

	output OnReachStart(void) : "[VTMB] Fired when brush reaches start movement point."
	output OnReachEnd(void) : "[VTMB] Fired when brush reaches end movement point."
	
	output OnMoveTowardsStart(void) : "[VTMB] Fired when move toward starts [untested]."
	output OnMoveTowardsEnd(void) : "[VTMB] Fired when move toward ends [untested]."
]









//===================================================================================================================
// func_rotating [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Shadow (included)
//  removed: solidbsp (new)
//  removed: StopAtStartPos,
//  mark as unsupported: message
//  improved controls

@BaseClass
= e_func_rotating
[
	sep_rotmain(string) readonly: "------------------------------------"

	maxspeed(integer) : "Max Rotation Speed" : 10 : "The maximum rotation speed of the brushes, in degrees per second."
	fanfriction(integer) : "Friction (0 - 100%)" : 20 : "The amount of rotational friction. Value must be between 0 and 100 %."
	dmg(integer) : "Blocking Damage" : 0 : "Damage done to any entity that blocks the rotation, per frame."

	sep_rotsnds(string) readonly: "------------------------------------"

	message(sound) : "Rotating Sound" :  : "Sound to play while rotating." =
	[
		"environmental/machines/electric_fan2.wav" : "Environmental/Machines/Electric_Fan2.wav"
		"environmental/machines/fan large rusty.wav" : "Environmental/Machines/Fan Large Rusty.wav"
		"environmental/machines/fan noir.wav" : "Environmental/Machines/Fan Noir.wav"
		"environmental/machines/fan noir fast.wav" : "Environmental/Machines/Fan Noir Fast.wav"
		"environmental/machines/fan noir huge.wav" : "Environmental/Machines/Fan Noir Huge.wav"
		"environmental/machines/large_fan.wav" : "Environmental/Machines/Large_Fan.wav"
	]
	volume(integer) : "Volume (10=max)" : 10 : "The volume of the rotation sound."
	sounds(choices) : "Sounds Type" : 0 : "[VTMB] Sounds to play when rotating [not tested - works?]." =
	[
		0: "None (Silent)"
		21: "lever or wheel: turn + move sqeek"
		22: "lever or wheel: latch + release gas"
		23: "lever or wheel: ratchet + sqeek"
		24: "lever or wheel: large ratchet"
		25: "lever or wheel: clanky + gas release"
		26: "lever or wheel: latch + large metal thud"
		27: "lever or wheel: smaller ratchet"
		28: "lever or wheel: smaller lever move"
	]

	spawnflags(flags) =
	[
		1 : "Start ON"  : 0
		2 : "Reverse Direction" : 0
		4 : "X Axis"  : 0
		8 : "Y Axis"  : 0
		16: "Acc/Dcc" : 0
		32: "Fan Pain" : 0
		64: "Not Solid" : 0
		128: "Small Sound Radius" : 0
		256: "Medium Sound Radius" : 0
		512: "Large Sound Radius" : 1
	]

	// Inputs
	input SetSpeed(float) : "Set the speed as a ratio of the specified Max Rotation Speed, where 0 is stopped and 1 is the Max Rotation Speed.."
	input Start(void) : "Start the rotator rotating."
	input Stop(void) : "Stop the rotator from rotating."
	input StartForward(void) : "Start the rotator rotating forward."
	input StartBackward(void) : "Start the rotator rotating backward."
	input Toggle(void) : "Toggle the rotator between rotating and not rotating."
	input Reverse(void) : "Reverse the direction of rotation of the rotator."
]

@SolidClass
base (
	TargetnameRot,
	Parentname,
	p_Origin,
	e_func_rotating,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_rotating :
	"A rotating brush entity."
[
	// RF order fix
]






































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// INTERFACE
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// game_text [common]
//===================================================================================================================
// VTMB-adaptation:
//  fixed: description
//  fixed: y position
//  removed: master (unused)
//  added: new io's

@PointClass
base (
	Targetname
)
iconsprite("editor/game_text.vmt")
= game_text : 
	"An entity that displays text on screen." 
[
	message(string) : "Message Text" : "" : "Message to display onscreen. \n\nYou can also define variables from localized 'resource/*.txt' files (e.g. #MyMessage)."

	x(float) : "X Pos (-1=center)" : "-1"  : "Horizontal position on the player's screens to draw the text. \nThe value should be between 0 and 1, where 0 is the far left of the screen and 1 is the far right. \n-1 centers the text."
	y(float) : "Y Pos (-1=center)" : "0.8" : "Vertical position on the player's screens to draw the text. \nThe value should be between 0 and 1, where 0 is the top of the screen and 1 is the bottom. \n-1 centers the text."

	sep_gtmain(string) readonly: "------------------------------------"

	effect(Choices) : "Text Effect" : 0 =
	[
		0 : "Fade In/Out"
		1 : "Credits"
		2 : "Scan Out"
	]

	color(color255) : "Text Color 1" : "100 100 100"
	color2(color255) : "Text Color 2" : "240 192 64"

	sep_gtftime(string) readonly: "------------------------------------"

	fadein(float) : "Fade in Time" : "1.5" : "The time it should take for the text to fully fade in (or character full scan)."
	fadeout(float) : "Fade Out Time" : "0.5" : "The time it should take for the text to fade out, after the hold time has expired."
	holdtime(float) : "Hold Time" : "1.2" : "The time the text should stay onscreen, after fading in, before it begins to fade out."
	fxtime(float) : "Scan Time" : "0.25" : "(Scan effect only) If the 'Text Effect' is set to Scan Out, this is the time it should take to scan out all the letters in the text."

	sep_gtadds(string) readonly: "------------------------------------"

	channel(choices) : "Text Channel" : 1 : "You can have up to four individual game_text messages onscreen at once, stored in channels. Select which channel this text should be placed in, which will overwrite any active message already in that channel." =
	[
		1 : "Channel 1"
		2 : "Channel 2"
		3 : "Channel 3" 
		4 : "Channel 4"
	]

	spawnflags(flags) =
	[
		1: "All Players" : 0
	]

	// Inputs
	input Display(void) : "Display the message text."
	input DisplayWindow(void) : "[VTMB] Displays enveloping message window."
	input CloseWindow(void) : "[VTMB] Closes enveloping message window."
]









































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// Hints & Nodes
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: Node [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: base(TargetnameRot) (used by all)

@BaseClass
base (
	TargetnameRot
)
= Node 
[
	sep_nodes(string) readonly: "------------------------------------"
	nodeid(integer) readonly: "Node ID"
]


//===================================================================================================================
// CLASS: HintNode [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: usunes hinntype's values
//  removed: hintactivity,nodeFOV (new)
//  removed: TargetNode,IgnoreFacing (new)
//  removed: MinimumState,MaximumState (new)
//  removed: spawnflags (new)

@BaseClass
base (
	Node
)
= HintNode 
[
	hinttype(choices) : "Hint Type" : 0 = 
	[
		  0 : "None"

		  2: "World: Window"
		 12: "World: Act Busy Hint"
		 13: "World: Visually Interesting"
		 14: "World: Visually Interesting (Don't aim at)"
		 15: "World: Inhibit Combine Mines within 15 feet"
		 16: "World: Visually Interesting (Stealth mode)"

		100: "Crouch Cover Medium"
		101: "Crouch Cover Low"

		10100: "10100: Unknown VtMB's"
		19000: "19000: Unknown VtMB's"
	]

	// Does not inherit from EnableDisable, as node itself will
	// use that.  This is enabling/disabling of the hint only
	StartHintDisabled(choices) : "Start Hint Disabled" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	Group(string) : "Hint Group" :  : "If specified, gives the hint a specific group name. \nUseful for hint nodes that need to be logically grouped together. \nNPCs may also refuse to use hint nodes that don't match their hint group."

	// Inputs
	input EnableHint(void) : "Enable hint."
	input DisableHint(void) : "Disable hint."
]





//===================================================================================================================
// info_hint [common]
//===================================================================================================================
// VTMB-adaptation:
//  moved: base(Targetname,Angles) (already included)

@PointClass
base (
	HintNode
)
studio("models/editor/node_hint.mdl")
color(255 255 255)
= info_hint :
	"A hint that is not used for navigation. They don't go into the nodegraph, nor do they fall to the ground. Use these to provide " +
	"some spatial context for NPCs, such as 'look here if you can't find the player' or 'throw rocks at this spot'."
[
]



//===================================================================================================================
// info_node [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: spawnflags (new)

@PointClass
base (
	Node
)
studio("models/editor/ground_node.mdl")
color(232 219 8) = info_node :
	"A navigation node for ground moving NPCs. Navigation nodes are baked into the nodegraph so that NPCs can move " +
	"to them. Ground nodes fall to the ground when they spawn."
[
]




//===================================================================================================================
// info_node_climb [common]
//===================================================================================================================
// VTMB-adaptation
//  removed: base(Targetname,Angles) (already included)
//  added: hinttype

@PointClass base(HintNode) studio("models/editor/climb_node.mdl") color(153 215 103) = info_node_climb : 
	"A climb-node for AI navigation. Only usable by NPCs that can climb."
[
	hinttype(choices) : "Hint" : 10000 = [ 10000 : "Untested VTMB's (10000)" ]	
]




//===================================================================================================================
// info_node_link [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: linktype (new)
//  removed: InvertAllow (new)
//  removed: spawnflags (new)

@PointClass base(Targetname) color(220 180 0) size(-8 -8 -8, 8 8 8) line(255 255 255, nodeid, StartNode, nodeid, EndNode) = info_node_link :
	"A dynamic connection between two navigation nodes. You specify the node IDs of the start and end nodes, and then you can use entity I/O " +
	"to turn on and off the connection. This could be used to create or destroy a connection in the nodegraph because of some event in your map " +
	"(a bridge being created/destroyed, etc)."
[
    StartNode(integer) : "Start node ID" : : "The node ID of one end of the node connection."
    EndNode(integer) : "End node ID" : : "The node ID of one end of the node connection."
	initialstate(choices) : "Initial State" : 1 =
	[
		0 : "Off"
		1 : "On"
	]
	AllowUse(string) : "Allow Pass When Off" : : "Entity or class to allow passage even when node is off"

	// Inputs
	input TurnOn(void) : "Turn the link on."
	input TurnOff(void) : "Turn the link off."
]










































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// INFO Entities
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// info_landmark [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: base(Parentname,Angles)
//  added: spawnflags
//  added: new io's

@PointClass
base (
	TargetnameRot,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
iconsprite("editor/info_landmark")
= info_landmark :
	"An entity that acts as a landmark for transitions to another level. \nThere should be a corresponding info_landmark entity in the next map. \nEntities will be transitioned to the next level relative to the info_landmark entities."
[
	spawnflags(flags) =
	[
		1 : "Flag 1 (unknown yet)" : 0
		2 : "Flag 2 (unknown yet)" : 0
	]

	// outputs
	output OnSpawnNoCopCars(void) : "Fired when no cop cars spawns."
	output OnSpawnOneCopCar(void) : "Wired when one cop car spawns."
	output OnSpawnTwoCopCars(void) : "Wired when two cop cars spawns."
	output OnDelaySpawnOneCopCar(void) : "Wired when spawning one cop car delays [-?]."
	output OnDelaySpawnTwoCopCars(void) : "Wired when spawning two cop cars delays [-?]."
	output OnCopsInPursuit(void) : "Fired when cops are in pursuit state."
	output OnHeightenedAlert(void) : "Fired when player have heightened alert level."
	output OnEnterMapHere(void) : "Wired when player enters map in this place."
]




//===================================================================================================================
// info_player_start [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: PlayerClass (unneeded)

@PointClass
base (
	p_Angles
)
color(0 255 0)
studio("models/editor/playerstart.mdl")
= info_player_start :
	"This entity indicates the position and facing direction at which the player will spawn. Any number of "+
	"info_player_start entities may be placed in a map for when working in cordoned-off portions of the map. "+
	"When multiple info_player_start entities are present in a map, set the 'Master' spawnflag on one of them "+
	"to indicate which one should be used when running the entire map."
[
	spawnflags(flags) =
	[
		1: "Master (Has priority if multiple info_player_starts exist)" : 0
	]
]




//===================================================================================================================
// info_target [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: spawnflags,angles (unsup)

@PointClass
base (
	Targetname,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
iconsprite("editor/info_target.vmt")
= info_target :
	"An entity that does nothing. Very useful as a positioning entity for other entities to refer to (i.e. the endpoint of an env_beam)"
[
]




//===================================================================================================================
// info_lighting [common]
//===================================================================================================================
// VTMB-adaptation:
//  changed: targetname = "sprp_lighting_0"

@PointClass
iconsprite("editor/info_lighting.vmt")
= info_lighting :
	"An entity that can be used to change the lighting origin of a prop_static. \nSet the prop_static's Lighting Origin to point at this entity to "+
	"make the prop_static light as if it was at the info_lighting's origin. \nGood for prop_static entities that are embedded in world geometry (like rocks/windows/etc)."
[
	targetname(target_source) : "Name" : "sprp_lighting_0" : "The name that static props refer to this entity using its 'Lighting Origin' property."
]



//===================================================================================================================
// info_teleport_destination [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: desc.note

@PointClass
base (
	TargetnameRot,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
color(0 255 0)
studio("models/editor/playerstart.mdl")
= info_teleport_destination :
	"An entity that does nothing itself, but can be used to specify the destination for a trigger_teleport entity. An info_target can be used instead. \n\n"+
	"[VTMB] Note: Despite its name, teleportation doesn't require a special node. Any named Entity will do. This class is mostly used to clarify the nodes purpose to an observant reader."
[
]




//===================================================================================================================
// point_teleport [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: output (OnEnterMapHere)
//  fixed: display icon

@PointClass
base (
	TargetnameRot
)
iconsprite("editor/info_target.vmt")
= point_teleport :
	"An entity that teleports a target entity to this position and angles. \n"+
	"If 'Teleport Home' spawn flag is set, teleports the target entity to its spawn position instead. \n"+
	"If object is physically simulated, simulation is turned off when teleported."
[
	sep_ptmain(string) readonly: "------------------------------------"
	target(target_destination) : "Entity To Teleport" : "!player" : "Name of the entity that will be teleported."

	spawnflags(flags) =
	[
		1 : "Teleport Home" : 0
	]

	// connections
	input Teleport(void) : "Teleport the target entity."
	output OnEnterMapHere(void) : "Fired when player enters map in place of this entity [not tested]."
]




//===================================================================================================================
// infodecal [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: base(Angles)
//  removed: Targetname,Activate (unsup)
//  removed: LowPriority (new)


@PointClass
decal()
studio("models/editor/axis_helper_thick.mdl")
= infodecal :
	"An entity that places a decal on the world. If the decal has no target name, it will immediately apply itself when the level is loaded. "+
	"If it has a name specified, it won't apply until it receives the 'Activate' input."
[
	texture(decal) : "Decal Texture"
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// LIGHTS
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: Light [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: _lightHDR,_lightscaleHDR (new)
//  removed: _hardfalloff (new)
//  added: fade_time
//  added: _distance_smooth
//  renamed: _distance

@BaseClass
color(180 10 180)
= Light
[
	_light(color255) : "Brightness" : "255 255 255 200" : "Set the light color and brightness. \nFirst three values defines RGB color tint, fourth is light intensity (roughly equivalent to Watts)."

	sep_litstyles(string) readonly: "------------------------------------"

	style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	pattern(string) : "Custom Appearance" : "" : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	fade_time(float) : "Pattern Fade Time" : "0.05" : "[VTMB] The time during which the light fades to given pattern when 'FadeToPattern' input sent."

	sep_litattn(string) readonly: "------------------------------------"

	_constant_attn(string)	: "Constant" : "0" : "Constant/Linear/Quadratic: \nThese three values determine how the intensity of the emitted light falls off over distance."
	_linear_attn(string)	: "Linear" : "0" : "Constant/Linear/Quadratic: \nThese three values determine how the intensity of the emitted light falls off over distance."
	_quadratic_attn(string)	: "Quadratic" : "1" : "Constant/Linear/Quadratic: \nThese three values determine how the intensity of the emitted light falls off over distance."
	_distance(choices) : "Cut-Off Distance" : 0 : "This is the distance that light is allowed to cast, in inches. \n0 means maximum (natural falloff), other values will cut light brightness outside specified radius if it's cast farther. \nUse 'Cutoff smoothing factor' to control falloff smoothness." =
	[
		0 : "None"
		16 : 16
		32 : 32
		48 : 48
		64 : 64
		80 : 80
		96 : 96
		128 : 128
		160 : 160
		192 : 192
		224 : 224
		256 : 256
		320 : 320
		400 : 400
		512 : 512
		768 : 768
		1024 : 1024
	]
	_distance_smooth(choices) : "Cut-Off Smoothing Factor" :  : "Defines smoothing factor of light falloff radius given by 'Cutoff Distance'. \nValue '0' gives no smoothing (sharp unrealistic falloff, Troika's default), '0.5' - medium smoothing, and '1.0' disables falloff at all (radius will be ignored)." =
	[
		""     : "0.0 (No smoothing)"
		"0.1"  : "0.1"
		"0.2"  : "0.2"
		"0.25" : "0.25 (Slight smoothing)"
		"0.3"  : "0.3"
		"0.4"  : "0.4"
		"0.5"  : "0.5 (Medium smoothing)"
		"0.6"  : "0.6"
		"0.7"  : "0.7"
		"0.75" : "0.75 (Strong smoothing)"
		"0.8"  : "0.8"
		"0.9"  : "0.9"
		"1.0"  : "1.0 (Disable cut-off)"
	]
	_fifty_percent_distance(string) : "50-percent falloff distance" : "0": "Distance at which brightness should fall off to 50%. \nIf set, overrides Linear, Constant, Quadratic and Maximum Distance paramaters."
	_zero_percent_distance(string) : "0-percent falloff distance" : "0": "Distance at which brightness should fall off to negligible (1/256)%. \nMust set '50-percent falloff distance' to use."

	spawnflags(Flags) =
	[
		1 : "Initially dark" : 0
		4 : "Flag 4 (unknown yet)" : 0
	]

	// Inputs
	input TurnOn(void) : "Turn the light on."
	input TurnOff(void) : "The the light off."
	input Toggle(void) : "Toggle the light's current state."
	input SetPattern(string) : "Set a custom pattern of light brightness for this light. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
	input FadeToPattern(string) : "Fades from first value in old pattern, to first value in the new given pattern. Pattern format is a string of characters, where 'a' is total darkness, 'z' fully bright. i.e. 'aaggnnttzz' would be a steppy fade in from dark to light."
]




//===================================================================================================================
// light [common]
//===================================================================================================================
// VTMB-adaptation:
//  used modified class
//  changed descriptions
//  removed: target

@PointClass
base (
	Targetname,
	Light
)
iconsprite("editor/light.vmt")
light()
sphere(_distance)
sphere(_fifty_percent_distance)
sphere(_zero_percent_distance)
= light :
	"An invisible omnidirectional light source."
[
]




//===================================================================================================================
// light_spot [common]
//===================================================================================================================
// VTMB-adaptation:
//  used modified class
//  changed descriptions
//  resorted elements

@PointClass
base (
	TargetnameRot,
	Light
)
lightprop("models/editor/spot.mdl")
lightcone()
sphere(_distance)
sphere(_fifty_percent_distance)
sphere(_zero_percent_distance)
= light_spot :
	"An invisible and directional spotlight."
[
	sep_litspot(string) readonly: "------------------------------------"

	_inner_cone(integer) : "Inner (bright) angle" : 30 : "Inner cone that focused main light. \nAllowed values: 0-90 (degrees)."
	_cone(integer) : "Outer (fading) angle" : 45 : "Outer cone that contains diffused light. \nAllowed values: 0-90 (degrees)."
	pitch(integer) : "Pitch (Tilt)" : -90 : "The downward pitch of the spotlight (degrees). \n0 is horizontal, -90 is straight down."
	_exponent(integer) : "Focus" : 1 : "Defines focusing of inner cone. \nAllowed values: 0-100. \nThe larger values gives more hard falloff."

	sep_litpoint(string) readonly: "------------------------------------"
	target(target_destination) : "Entity to point at" : : "The name of an entity in the map that the spotlight will point at. This will override the spotlight's angles."
]




//===================================================================================================================
// light_dynamic [common]
//===================================================================================================================
// VTMB-adaptation:
//  changed descriptions

@PointClass
base (
	TargetnameRot,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
iconsprite("editor/light.vmt")
sphere(distance)
sphere(spotlight_radius)
lightcone()
size(-4 -4 -4, 4 4 4)
= light_dynamic :
	"An invisible lightsource that changes in some way over time." 
[
	sep_ltdmain(string) readonly: "------------------------------------"
	_light(color255) : "Light color" : "255 255 255"
	brightness(integer) : "Light brightness" : 0
    style(Choices) : "Appearance" : 0 =
	[
		0 : "Normal"
		10: "Fluorescent flicker"
		2 : "Slow, strong pulse"
		11: "Slow pulse, noblack"
		5 : "Gentle pulse"
		1 : "Flicker A"
		6 : "Flicker B"
		3 : "Candle A"
		7 : "Candle B"
		8 : "Candle C"
		4 : "Fast strobe"
		9 : "Slow strobe"
	]
	distance(choices) : "Maximum distance" : 128 : "This is the distance that light is allowed to cast, in inches." =
	[
		16 : 16
		32 : 32
		48 : 48
		64 : 64
		80 : 80
		96 : 96
		128 : 128
		160 : 160
		192 : 192
		224 : 224
		256 : 256
		320 : 320
		400 : 400
		512 : 512
		768 : 768
		1024 : 1024
	]

	sep_ltdspot(string) readonly: "------------------------------------"
	_inner_cone(integer) : "Inner (bright) angle" : 30 : "Inner cone that focused main light. \nAllowed values: 0-90 (degrees)."
	_cone(integer) : "Outer (fading) angle" : 45 : "Outer cone that contains diffused light. \nAllowed values: 0-90 (degrees)."
	pitch(integer) : "Pitch (Tilt)" : -90 : "The downward pitch of the spotlight (degrees). \n0 is horizontal, -90 is straight down."
	spotlight_radius(choices) : "Spotlight end radius" : 128 : "This is the radius of the light, in inches, at the object that it is hitting. \nLarger radiuses give more far and bright spots. \nAffects the world lighting only." =
	[
		16 : 16
		32 : 32
		48 : 48
		64 : 64
		80 : 80
		96 : 96
		128 : 128
		160 : 160
		192 : 192
		224 : 224
		256 : 256
		320 : 320
		400 : 400
		512 : 512
		768 : 768
		1024 : 1024
	]

	sep_ltdadds(string) readonly: "------------------------------------"
	target(target_destination) : "Entity to point at" : : "The name of an entity in the map that the dynamic light will point at."

	spawnflags(Flags) = 
	[ 
		1 : "Do not light world" : 0 
		2 : "Do not light models" : 0
		4 : "Add Displacement Alpha" : 0
		8 : "Subtract Displacement Alpha" : 0
	]

	// Inputs
	input Color(color255) : "Set the light's render color (R G B)."
	input brightness(integer) : "Set the light brightness."
	input distance(float) : "Set the maximum light distance."
	input _inner_cone(integer) : "Set the inner (bright) angle."
	input _cone(integer) : "Set the outer (fading) angle."
	input spotlight_radius(float) : "Set the radius of the spotlight at the end point."
	input style(integer) : "Change the lightstyle (see Appearance field for possible values)."
	input TurnOn(void) : "Turn the light off."
	input TurnOff(void) : "Turn the light on."
	input Toggle(void) : "Toggle the light on/off."
]




//===================================================================================================================
// light_environment [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: _*HDR values (unsup)
//  removed: SunSpreadAngle (new)
//  fixed: pitch (duplicated)
//  added: lightcone() to view
//  renamed: Pitch -> Sun Angle

@PointClass
base(
	p_Angles
)
iconsprite("editor/light_env.vmt")
lightcone(60) = light_environment :
	"Sets the color and angle of the light from the sun and sky."
[
	_light(color255) : "Brightness" : "100 112 128 40"
	_ambient(color255) : "Ambient" : "32 56 100 20"
	pitch(integer) : "Sun Angle" : -90 : "The downward pitch of the light from the sun (or from other most bright area of the sky). \n0 is horizontal, -90 is straight down."
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// LOGICAL Entities
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// logic_auto [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: OnBackgroundMap (new)
//  removed: OnMultiNewMap,OnMultiNewRound (new)
//  removed: OnMapSpawn,OnNewGame,OnLoadGame,OnMapTransition (unsup)
//  removed: globalstate (unused)
//  marked as unsupported: Outputs
//  added: targetname
//  added: StartHidden
//  added: spawnflags(2)

@PointClass
base (
	Targetname
)
iconsprite("editor/logic_auto.vmt")
= logic_auto :
	"Fires outputs when a map spawns. " +
	"If 'Remove on fire' flag is set the logic_auto is deleted after firing. " +
	"It can be set to check a global state before firing. This allows you to only fire events based on "+
	"what took place in a previous map."
[
	spawnflags(Flags) =
	[
		1 : "Remove on fire" : 1
		2 : "Flag 2 (unknown yet)" : 0
	]
	// outputs
	output OnMapLoad(void) : "[VTMB] Fired when the map loaded."
]



//===================================================================================================================
// logic_case [common]
//===================================================================================================================
// not changed.

@PointClass
base (
	Targetname
)
iconsprite("editor/logic_case.vmt")
= logic_case :
	"Compares an input to up to 16 preset values. If the input value is the same as " +
	"any of the preset values, an output corresponding to that value is fired.\n\n" +
	"For example: if Case01 is set to 2 and Case02 is set to 5, and the input value is 5, " +
	"the OnCase02 output will be fired.\n\n" +
	"This entity can also be used to select from a number of random targets via the " +
	"PickRandom input. One of the OnCase outputs that is connected to another entity will " +
	"be picked at random and fired."
[
	sep_casem(string) readonly: "------------------------------------"

	Case01(string) : "Case 01"
	Case02(string) : "Case 02"
	Case03(string) : "Case 03"
	Case04(string) : "Case 04"
	Case05(string) : "Case 05"
	Case06(string) : "Case 06"
	Case07(string) : "Case 07"
	Case08(string) : "Case 08"
	Case09(string) : "Case 09"
	Case10(string) : "Case 10"
	Case11(string) : "Case 11"
	Case12(string) : "Case 12"
	Case13(string) : "Case 13"
	Case14(string) : "Case 14"
	Case15(string) : "Case 15"
	Case16(string) : "Case 16"

	// Inputs
	input InValue(string) : "Input value to compare to the case values"
	input PickRandom(void) : "Fires a random OnCase output with at least one connection"
	
	// Outputs
	output OnCase01(void) : "Fires when the input value equals the Case01 value"
	output OnCase02(void) : "Fires when the input value equals the Case02 value"
	output OnCase03(void) : "Fires when the input value equals the Case03 value"
	output OnCase04(void) : "Fires when the input value equals the Case04 value"
	output OnCase05(void) : "Fires when the input value equals the Case05 value"
	output OnCase06(void) : "Fires when the input value equals the Case06 value"
	output OnCase07(void) : "Fires when the input value equals the Case07 value"
	output OnCase08(void) : "Fires when the input value equals the Case08 value"
	output OnCase09(void) : "Fires when the input value equals the Case09 value"
	output OnCase10(void) : "Fires when the input value equals the Case10 value"
	output OnCase11(void) : "Fires when the input value equals the Case11 value"
	output OnCase12(void) : "Fires when the input value equals the Case12 value"
	output OnCase13(void) : "Fires when the input value equals the Case13 value"
	output OnCase14(void) : "Fires when the input value equals the Case14 value"
	output OnCase15(void) : "Fires when the input value equals the Case15 value"
	output OnCase16(void) : "Fires when the input value equals the Case16 value"
	output OnDefault(void) : "Fires when the input value does not equal any of the Case values"
]



//===================================================================================================================
// logic_choreographed_scene [common, HL2-based]
//===================================================================================================================
// VTMB-adaptation:
//  added: vtmb-notes
//  removed: target > 4 (new)
//  removed: OnTrigger > 4 (new)
//  removed: busyactor,onplayerdeath (new)
//  removed: some inputs (new)
//  added: Angles,BaseAnim,MaleAnim,FemaleAnim
//  added: override_speech_target
//  added: position_start,position_end
//  added: force_lod,force_lod_2
//  added: hide_ents,full_sound

@PointClass
base (
	TargetnameRot
)
color(0 0 255)
iconsprite("editor/choreo_scene.vmt")
= logic_choreographed_scene :
	"Manages a choreographed scene of one or more actors.\n\n"+
	"[VTMB] Notes:\n\n"+
    "Some MDL files contain skeletal animation info for more than 1 model."+
    "logic_choreographed_scene allows you to identify default models for use by the animation.\n\n"+
    "The 'SceneFile' contains references to named Entities and Duration information for the animation (is it looping, 1 shot, how long should it play, etc...).\n"+
	"Note that this does NOT restrict the model.\n\n"+
    "You can create the model at runtime to be any compatible model you wish ( VTMB does this in the intro ), so long as you name it accordingly.\n\n"+
    "'BaseAnim' points to the MDL file containing the multi-skeletal animation."

[
	sep_scnmain(string) readonly: "------------------------------------"

	// Keys
	SceneFile(vscene) : "Scene file"

	// Links
	target1(target_destination) : "Target 1"
	target2(target_destination) : "Target 2"
	target3(target_destination) : "Target 3"
	target4(target_destination) : "Target 4"

	sep_scnanim(string) readonly: "------------------------------------"

	BaseAnim(studio) : "Base Animation" : : "[VTMB] Points to the MDL file containing the multi-skeletal animation."
	MaleAnim(studio) : "Male Animation" : : "[VTMB] Points to the MDL file containing male multi-skeletal animation."
	FemaleAnim(studio) : "Female Animation" : : "[VTMB] Points to the MDL file containing female multi-skeletal animation."

	sep_scnadd1(string) readonly: "------------------------------------"

	override_speech_target(target_destination) : "Override Speech Target" : : "[VTMB] Overrides speech sound source with this target entity."

	position_start(integer) : "Start Position" : 0 : "[VTMB] Unknown yet..."
	position_end(integer) : "End Position" : 0 : "[VTMB] Unknown yet..."

	sep_scnadd2(string) readonly: "------------------------------------"

	full_sound(choices) : "Full Sound" : 1 : "[VTMB] Unknown yet..." = [ 0 : "No" 1 : "Yes" ]
	hide_ents(choices) : "Hide Entities" : 0 : "[VTMB] Unknown yet..." = [ 0 : "No" 1 : "Yes" ]
	force_lod(choices) : "Force LOD" : 0 : "[VTMB] Unknown yet..." = [ 0 : "No" 1 : "Yes" ]
	force_lod_2(choices) : "Force LOD 2" : 0 : "[VTMB] Unknown yet..." = [ 0 : "No" 1 : "Yes" ]

	// Inputs
	input Start(void) : "Starts playback of the scene file"
	input Pause(void) : "Pauses playback of the scene file"
	input Resume(void) : "Resumes playback of the scene if it has been paused"
	input Cancel(void) : "Cancels playback of the scene"

	// Outputs
	output OnStart(void) : "The scene has started"
	output OnCompletion(void) : "The scene has completed"
	output OnCanceled(void) : "The scene has been canceled"
	output OnTrigger1(void) : "Scene trigger 1"
	output OnTrigger2(void) : "Scene trigger 2"
	output OnTrigger3(void) : "Scene trigger 3"
	output OnTrigger4(void) : "Scene trigger 4"
]




//===================================================================================================================
// logic_relay [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: new spawnflags
//  added: new outputs
//  removed OnSpawn,CancelPending (unsup)

@PointClass
base (
	Targetname,
	EnableDisable
)
iconsprite("editor/logic_relay.vmt")
= logic_relay :
	"A message forwarder. Fires an OnTrigger output when triggered, and " +
	"can be disabled to prevent forwarding outputs.\n\n" +
	"Useful as an intermediary between one entity and another for turning " +
	"on or off an I/O connection, or as a container for holding a set of " +
	"outputs that can be triggered from multiple places."
[
	spawnflags(flags) =
	[
		1: "Only trigger once" : 0
		2: "Allow fast retrigger" : 0
	 // vtmb
		8: "Flag 8 (unknown yet)" : 0
		16: "Flag 16 (unknown yet)" : 0
		32: "Flag 32 (unknown yet)" : 0
		1024: "Flag 1024 (unknown yet)" : 0
	]

	// Inputs
	input Trigger(void) : "Trigger the relay, causing its OnTrigger output to fire if it is enabled."
	input Toggle(void) : "Toggle the relay between enabled and disabled."

	// Outputs
	output OnTrigger(void) : "Fired when the relay is triggered. If the relay is set to only trigger once, it will delete itself after firing this output."
	//output OnDialogEnd(void) : "[VTMB] Fired when dialog ends [not tested]."
	//output OnMapLoad(void) : "[VTMB] Fired when the map is loaded for any reason."
]





//===================================================================================================================
// logic_timer [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: new spawnflag
//  removed: AddToTimer (new)
//  removed: SubtractFromTimer (new)

@PointClass
base (
	Targetname,
	EnableDisable
)
iconsprite("editor/logic_timer.vmt")
= logic_timer :
	"An entity that fires a timer event at regular, or random, intervals. It can also be set to oscillate between" + 
	"a high and low end, in which case it will fire alternating high/low outputs each time it fires."
[
	sep_ltmain(string) readonly: "------------------------------------"

	UseRandomTime(choices) : "Use Random Time" : 0 =
	[
		0 : "No"
		1 : "Yes"
	]
	LowerRandomBound(float) : "Minimum Random Interval" :  : "If 'Use Random Time' is set, this is the minimum time between timer fires. The time will be a random number between this and the 'Maximum Random Interval'."
	UpperRandomBound(float) : "Maximum Random Interval" :  : "If 'Use Random Time' is set, this is the maximum time between timer fires. The time will be a random number between the 'Minimum Random Interval' and this."
	RefireTime(float) : "Refire Interval" :  : "If 'Use Random Time' isn't set, this is the time between timer fires, in seconds."

	spawnflags(flags) =
	[
		1 : "Oscillator (alternates between OnTimerHigh and OnTimerLow outputs)" : 0
		2 : "Flag 2 (unknown yet)" : 0
	]

	// Inputs
	input RefireTime(integer) : "Set a new Refire Interval."
	input ResetTimer(void) : "Reset the timer. It will fire after the Refire Interval expires."
	input RefireTimer(void) : "[VtMB] Reset the timer. It will fire after the Refire Interval expires."
	input FireTimer(void) : "Force the timer to fire immediately."
	input Enable(void) : "Enable the timer."
	input Disable(void) : "Disable the timer."
	input Toggle(void) : "Toggle the timer on/off."
	input LowerRandomBound(float) : "Set a new Minimum Random Interval."
	input UpperRandomBound(float) : "Set a new Maximum Random Interval."

	// Outputs
	output OnTimer(void) : "Fired when the timer expires."
	output OnTimerHigh(void) : "Fired every other time for an oscillating timer."
	output OnTimerLow(void) : "Fired every other time for an oscillating timer."
]





//===================================================================================================================
// math_counter [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: some io's (new)

@PointClass
base (
	Targetname,
	EnableDisable
)
iconsprite("editor/math_counter.vmt")
= math_counter :
	"Holds a numeric value and performs arithmetic operations upon it. If either the minimum or maximum " +
	"legal value is nonzero, OutValue will be clamped to the legal range, and the OnHitMin/OnHitMax " +
	"outputs will be fired at the appropriate times. If both min and max are set to zero, no clamping is " +
	"performed and only the OutValue output will be fired."
[
	sep_mcmain(string) readonly: "------------------------------------"

	// Keys
	startvalue(integer) : "Initial Value" : 0 : "Starting value for the counter."
	min(integer) : "Minimum Legal Value" : 0 : "Minimum legal value for the counter. If min=0 and max=0, no clamping is performed."
	max(integer) : "Maximum Legal Value" : 0 : "Maximum legal value for the counter. If min=0 and max=0, no clamping is performed."

	// Inputs
	input Add(integer) : "Add an amount to the counter and fire the OutValue output with the result."
	input Divide(integer): "Divide the counter by an amount and fire the OutValue output with the result."
	input Multiply(integer): "Multiply the counter by an amount and fire the OutValue output with the result."
	input SetValue(integer): "Set the counter to a new value and fire the OutValue output with the result."
	input Subtract(integer): "Subtract an amount from the counter and fire the OutValue output with the result."

	// Outputs
	output OutValue(integer) : "Fired when the counter value changes."
	output OnHitMin(void) : "Fired when the counter value meets or goes below the min value. The counter must go back above the min value before the output will fire again."
	output OnHitMax(void) : "Fired when the counter value meets or exceeds the max value. The counter must go below the max value before the output will fire again."
]









































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// Moving, Keyframes and Ropes
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: RopeKeyFrame [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: DxLevelChoice (unused)
//  removed: NoWind (new)
//  added: MoveTime,RopeShader,TimeControl (VtMB's)
//  added: NextKey,MoveSpeed (from Mover)

@BaseClass
base (
	Targetname,
	Parentname
)
= RopeKeyFrame
[
	sep_rkfmain(string) readonly: "------------------------------------"

	// visual
	Type(choices) : "Rope Type" : 0 =
	[
		0  : "Rope"
		1  : "Semi-rigid"
		2  : "Rigid"
	]
	RopeMaterial(material) : "Rope Material" : "cable/cable" : "The material to use when rendering the rope." //=
//	[
//	// MaterialList:
//		"cable/barbedwire" : "cable/barbedwire"
//		"cable/cable" : "cable/cable"
//		"cable/cautiontape" : "cable/cautiontape"
//		"cable/chain" : "cable/chain"
//		"cable/chainb" : "cable/chainb"
//		"cable/christmaslight_green" : "cable/christmaslight_green"
//		"cable/christmaslight_red" : "cable/christmaslight_red"
//		"cable/christmaslight_yellow" :"cable/christmaslight_yellow"
//		"cable/metalcable" : "cable/metalcable"
//		"cable/rope" : "cable/rope"
//	]
	Width(string) : "Rope Width (1-64)" : "2" : "Width of the rope, in units."
	TextureScale(string) : "Texture Scale" : "1" : "This changes the texture resolution. \nThe default resolution is 4 pixels per inch. Larger values stretch the texture and smaller values scrunch it up."

	sep_rkfpref(string) readonly: "------------------------------------"

	Slack(integer) : "Slack" : 25 : "How much extra length the rope has (by default it has the length between its two endpoints in the editor)."
	Subdiv(integer) : "Subdivision" : 2 : "Number of subdivisions between each rope segment. Maximum value is 8. Higher values make smoother ropes, but are slower to render."
	Barbed(choices) : "Barbed" : 0 : "Test effect that makes the rope look sharper and more barbed." = [ 0: "No" 1: "Yes" ] 

	sep_rkfadd1(string) readonly: "------------------------------------"

	Dangling(choices) : "Start Dangling" : 0 : "When set to Yes, the rope starts out detached from its target endpoint." = [ 0: "No" 1: "Yes" ] 
	Collide(choices) : "Collide with world" : 0 = [ 0: "No" 1: "Yes" ]
	Breakable(choices) : "Breakable" : 0 : "When set to yes, the rope can be detached from either endpoint when shot." = [ 0: "No" 1: "Yes" ] 
	Tension(integer) : "Rope Tension" : 20 : "[VTMB] Rope's tension when breakable [not tested]."

	sep_rkfadd2(string) readonly: "------------------------------------"

	NextKey(target_destination) : "Next KeyFrame" : : "Name of the next keyframe along this keyframe path."
	MoveSpeed(integer) : "Move Speed (units/s)" : 64
	MoveTime(float) : "Move Time (secs)" : "1" : "[VTMB] Rope movie time [not tested]."
	TimeControl(choices) : "Time Modifier" : 0 : "[VTMB] Unknown yet..." =
	[
		0 : "Linear"
		1 : "Accel"
		2 : "Deaccel"
	]

	spawnflags(Flags) = 
	[
		1 :  "Auto Resize" : 0
	]

	// Inputs
	input SetScrollSpeed(float) : "Set the speed at which the texture scrolls."
	input SetForce(string) : "Apply a force instantaneously to the rope. The parameter should be a vector containing the force to be applied (X Y Z)."
	input Break(void) : "Break the rope, if it's marked to do so."
]




//===================================================================================================================
// keyframe_rope [common]
//===================================================================================================================

@KeyFrameClass
base (
	RopeKeyFrame
)
studio("models/editor/axis_helper_thick.mdl")
keyframe()
= keyframe_rope :
	"A node entity that marks a point in a rope. The first node in the rope should be a move_rope, followed by 1 or more keyframe_ropes."
[
	RopeShader(choices) : "Rope Shader" : 0 : "[VTMB] Shader that will be used for entity processing/rendering." =
	[
		0 : "Shader 0 (default)"
		2 : "Shader 2 (unknown yet)"
		5 : "Shader 5 (unknown yet)"
	]
]




//===================================================================================================================
// move_rope [common]
//===================================================================================================================

@MoveClass
base (
	RopeKeyFrame
)
studio("models/editor/axis_helper.mdl")
animator()
= move_rope :
	"The first node in set of nodes that are used to place ropes in the world. It should connect to 1 or more keyframe_rope entities."
[
	PositionInterpolator(choices) : "Position Interpolator" : 2 : "Curve Type. \nCurrently only type 2 (Rope) is fully supported." =
	[
		0 : "Linear"
		1 : "Catmull-Rom Spline"
		2 : "Rope"
	]
	RopeShader(choices) : "Rope Shader" : 0 : "[VTMB] Shader that will be used for entity processing/rendering." =
	[
		0 : "Shader 0 (default)"
		2 : "Shader 2 (unknown yet)"
		5 : "Shader 5 (unknown yet)"
	]
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// PHYSICS POINT Entities
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: TwoObjectPhysics [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: teleportfollowdistance (new)
//  added: output OnConstraintBroken

@BaseClass
base (
	Targetname
)
= TwoObjectPhysics
[
	sep_tppmain(string) readonly: "------------------------------------"

	attach1(target_destination) : "Entity 1" : "" : "Name of first attached entity."
	attach2(target_destination) : "Entity 2" : "" : "Name of second attached entity."
	constraintsystem(target_destination) : "Constraint System Manager" : "" : "The name of a phys_constraintsystem that this constraint should be a part of. All constraints on a set of entities should be placed in the same system, or they will fight each other during simulation. \nNot used in VtMB [testing needed]."

	sep_tppbrk(string) readonly: "------------------------------------"

	forcelimit(float) : "Force Limit to Break (lbs)" : 0 : "The amount of force an impact must apply to the constraint to break it. A way of calculating this is to set it to the mass of an object that would break this constraint if it were resting on the constrainted objects."
	torquelimit(float) : "Torque Limit to Break (lbs*dist)" : 0 : "The amount of torque required to break the constraint. A way of calculating this is to multiply any reference mass by the resting distance (from the center of mass of the object) needed to break the constraint."
	breaksound(sound) : "Sound to Play on Break" :  : "A sound played when the constraint is broken. \nNot used in VtMB [testing needed]."
	
	spawnflags(flags) =
	[
		1: "No Collision until break" : 0
	 // 2: is defined independently by subclasses, do not reuse
		4: "Start inactive" : 0
		8: "Change mass to keep stable attachment to world" : 0
		16: "Do not connect entities until turned on" : 0
	]

	// Inputs
	input Break(void) : "Force the constraint to break."
	input TurnOn(void) : "Enable the constraint. \nDo this when the objects don't exist when the constraint spawns - or when you have deactivated the constraint. \nBroken constraints can NOT be turned on. \nThey have been deleted."
	input TurnOff(void) : "Disable this constraint."

	// Outputs
	output OnBreak(void) : "Fired when the constraint breaks."
]



//===================================================================================================================
// CLASS: ForceController [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@BaseClass
base (
	Targetname
)
= ForceController
[
	sep_fcmain(string) readonly: "------------------------------------"

	attach1(target_destination) : "Attached Object" : "" : "Object to apply the force to."
	forcetime(string) : "Time of Force (0=inf)" : "0" : "Automatic shut-off after this time has passed (0 = stay on forever or until deactivated)"

	spawnflags(flags) =
	[
		// Thrust is on by default (will turn off in forcetime)
		1: "Start On" : 0
		// Apply linear force (if off, torque only)
		2: "Apply Force" : 1
		// Apply rotational force (torque - if off, linear only)
		4: "Apply Torque" : 1
		// Maintain local relationship with the attached object
		8: "Orient Locally" : 1
		// Impulse is independent of object's mass (impulse is acceleration NOT force)
		16: "Ignore Mass" : 0
	]

	input Activate(void) : "Turn the force on"
	input Deactivate(void) : "Turn the force off"
	input Scale(string) : "Set Force Scale"
]



//===================================================================================================================
// phys_ballsocket [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@PointClass
base (
	TwoObjectPhysics
)
line (
	255 255 255,
	attach1,
	attach2
)
iconsprite("editor/phys_ballsocket.vmt")
= phys_ballsocket :
	"A constraint that keeps the position of two objects fixed, relative to the constraint's origin. It does not affect rotation."
[
]



//===================================================================================================================
// phys_constraint [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@PointClass
base(
	TwoObjectPhysics
)
line (
	255 255 255,
	attach1,
	attach2
)
studio("models/editor/axis_helper.mdl")
= phys_constraint : 
	"A constraint that keeps the relative position and orientation of two objects fixed."
[
	spawnflags(flags) =
	[
		1: "No Collision until break" : 1
	]
]



//===================================================================================================================
// phys_convert [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: massoverride (new)
//  added: vtmb-note
//  added: makedebris
//  added: make_physhand_target

@PointClass
base(
	Targetname
)
line (
	255 255 255,
	targetname,
	target
)
size(-8 -8 -8, 8 8 8)
color(0 0 255)
= phys_convert :
	"Turns an arbitrary entity into a physically simulated entity. i.e. brush entities will behave like func_physbox, model entities behave like prop_physics. \n\n"+
	"Note: In VtMB game it usually uses to convert door to debris."
[
	sep_fcmain(string) readonly: "------------------------------------"

	target(target_destination) : "Entity to convert" : : "Name of the entity that will be converted to a physics object when the ConvertTarget input is fired."
	swapmodel(studio) : "Model Swap Entity" : : "Unknown yet. Not used in VTMB maps but supported [testing needed]."
	
	makedebris(choices) : "Make Debris" : 1 : "[VTMB] Makes debris when conversion end." = [ 0 : "No" 1 : "Yes" ]
	make_physhand_target(choices) : "Make Phys-hand Target" : 1 : "[VTMB] Makes debris that can be taked by physical hands." = [ 0 : "No" 1 : "Yes" ]

	spawnflags(flags) =
	[
		1: "Convert Asleep" : 0
		2: "Convert As Debris" : 0
	]

	// Inputs
	input ConvertTarget(void) : "Converts this entity's target to a physically simulated object." 
	// Outputs
	output OnConvert(void) : "Fires after the conversion has taken place."
]



//===================================================================================================================
// phys_hinge [common]
//===================================================================================================================
// VTMB-adaptation:
//  deleted: episodic properties (new)
//  deleted: SystemLoadScale (new)
//  deleted: SetAngularVelocity (new)

@PointClass
base(
	TwoObjectPhysics
)
line (
	255 255 255,
	attach1,
	attach2
)
halfgridsnap
size(-8 -8 -8, 8 8 8)
color(255 128 0)
= phys_hinge :
	"A physically simulated hinge. Use the helper to define the axis of rotation."
[
	sep_hinge(string) readonly: "------------------------------------"

	hingefriction(float) : "Hinge Friction" : 0 : "Resistance/friction in the hinge"
	hingeaxis(vecline) : "Hinge Axis" : : "World's origin to edit [not tested]."

	spawnflags(flags) =
	[
		2: "Flag 2 (unknown yet)" : 0
	]
]



//===================================================================================================================
// phys_thruster [common]
//===================================================================================================================
// not changed.

@PointClass
base (
	TargetnameRot,
	ForceController
)
= phys_thruster :
	"An entity used to apply constant acceleration to a physics object. "+
	"The force and torque is calculated using the position and direction of the thruster as an impulse. So moving those off the object's center "+
	"will cause torque as well. Torque can be removed by unchecking the 'apply torque' flag. The position of the thruster can be forced to be "+
	"at the object's center by checking to 'ignore pos' flag."
[
	force(string) : "Force" : 0 : "Force (will be integrated, units are force kg*in/s^2)"
	
	spawnflags(flags) =
	[
		// Put the thrust at the object center
		32: "Ignore Pos" : 0
	]
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// PHYSICS BRUSH Entities
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// func_breakable [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Shadow (included)
//  removed: _minlight,spawnobject,minhealthdmg (unused)
//  added: explosion_params
//  added: dmg_filter_name

@BaseClass
= e_func_breakable
[
	sep_bbmain(string) readonly: "------------------------------------"

	material(choices) : "Material Type" : 0 : "Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken." =
	[
		0: "Glass"
		1: "Wood"
		2: "Metal"		
		3: "Flesh"
		4: "CinderBlock"
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
		10: "None"
	]
	health(integer) : "Object Strength" : 5 : "Number of points of damage to take before breaking. \n'0' means don't break."

	sep_bbxplo(string) readonly: "------------------------------------"

	ExplodeDamage(float) : "Explosion Damage" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'."
	ExplodeRadius(float) : "Explosion Radius" : 0 : "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'."
	explodemagnitude(integer) : "Explosion Magnitude" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage."
	explosion_params(target_destination) : "Explosion Parameters" : : "[VTMB] A link to the 'params_explosion' entity that defines common explosion parameters."

	sep_bbdmg(string) readonly: "------------------------------------"

	explosion(choices) : "Gibs Direction" : 0 : "Used to decide which direction to throw gibs when broken." =
	[
		0: "Random"
		1: "Relative to Attack"
	]
	pressuredelay(float) : "Pressure Delay" : 0 : "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart)."
	dmg_filter_name(target_destination) : "Damage Filter" : : "[VTMB] Name of the filter entity that controls which entities can damage us [not tested]."

//	physdamagescale(float) : "Impact Damage Scale" : "1.0" : "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	collideable_gibs(choices) : "Collidable Gibs" : 0 : "[VTMB] Collide model's gibs with environment when it breaks [not tested]." = 
	[
		0 : "Mode 0 (unknown)"
		1 : "Mode 1 (unknown)"
		2 : "Mode 2 (unknown)"
	]
	
	spawnflags(flags) =
	[
		1 : "Only Break on Trigger" : 0
		2 : "Break on Touch" : 0
		4 : "Break on Pressure" : 0
		512: "Break immediately on Physics" : 0
		1024: "Don't take physics damage" : 0
		2048: "Don't allow bullet penetration": 0
		256: "Flag 256 (unknown yet)" : 1
	]

	// inputs
	input SetDamageable(integer) : "[VTMB] Set this entity as able to make damage [not tested]."
	input PhysDamageScale(float) : "Set the Physics Impact Damage Scale for this character. \nNote: 0 means this feature is disabled for backwards compatibility [not tested]."
]

@SolidClass
base (
	Targetname,
	Parentname,
	p_Origin,
	p_Global,
	e_func_breakable,
	o_VBreakable,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
sphere (
	ExplodeRadius
)
= func_breakable :
	"A brush entity that can be broken from damage, or an input." 
[
	// RF order fix
]





//===================================================================================================================
// func_breakable_surf [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Shadow (duplicated)
//  added: new spawnflag (256)
//  added: lowerleft,lowerright
//  added: upperleft,upperright
//  added: error (unknown)
//  removed: input Shatter

@BaseClass
= e_func_breakable_surf
[
	sep_bbmain(string) readonly: "------------------------------------"

	material(choices) : "Material Type" : 0 : "Set to the material type of the brush. Used to decide what sounds to make when damaged, and what gibs to produce when broken." =
	[
		0: "Glass"
		1: "Wood"
		2: "Metal"		
		3: "Flesh"
		4: "CinderBlock"
		5: "Ceiling Tile"
		6: "Computer"
		7: "Unbreakable Glass"
		8: "Rocks"
		10: "None"
	]
	surfacetype(choices) : "Surface Type" : 0 = 
	[
		0 : "Glass"
		1 : "Tile"
	]
	health(integer) : "Object Strength" : 5 : "Number of points of damage to take before breaking. \n'0' means don't break."
	fragility(integer) : "Object Fragility" : 100 : "If the 'Surface Type' is set to Glass, this value sets how fragile the glass pieces are after the surface has been broken."

	sep_bbdmg(string) readonly: "------------------------------------"

	explodemagnitude(integer) : "Explode Magnitude" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage."
	explosion(choices) : "Gibs Direction" : 0 : "Used to decide which direction to throw gibs when broken." =
	[
		0: "Random"
		1: "Relative to Attack"
	]
	pressuredelay(float) : "Pressure Delay" : 0 : "Delay, in seconds, after 'broken' by pressure before breaking apart (allows for sound to play before breaking apart)."
	dmg_filter_name(target_destination) : "Damage Filter" : : "[VTMB] Name of the filter entity that controls which entities can damage us [not tested]."

//	physdamagescale(float) : "Impact Damage Scale" : "1.0" : "Scales damage energy when this object is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	collideable_gibs(choices) : "Collidable Gibs" : 0 : "[VTMB] Collide model's gibs with environment when it breaks [not tested]." = 
	[
		0 : "Mode 0 (unknown)"
		1 : "Mode 1 (unknown)"
		2 : "Mode 2 (unknown)"
	]

	sep_bbbnds(string) readonly: "------------------------------------"

	lowerleft(vecline) : "Lower-Left Vertex" :  : "[VTMB] World's X/Y/Z-origin. Purpose unknown."
	lowerright(vecline) : "Lower-Right Vertex" :  : "[VTMB] World's X/Y/Z-origin. Purpose unknown."
	upperleft(vecline) : "Upper-Left Vertex" :  : "[VTMB] World's X/Y/Z-origin. Purpose unknown."
	upperright(vecline) : "Upper-Right Vertex" :  : "[VTMB] World's X/Y/Z-origin. Purpose unknown."
	error(string) : "Error Level (?)" : 0 :"[VTMB] Unknown, probably not used..."

	spawnflags(Flags) = 
	[
		1 : "Physics damage decals" : 0
		2 : "Take damage from held objects" : 0
		256 : "Flag 256 (unknown yet)" : 0
	]

	// inputs
	input SetDamageable(integer) : "[VTMB] Set this entity as able to make damage [not tested]."
]

@SolidClass
base (
	Targetname,
	Parentname,
	p_Global,
	e_func_breakable_surf,
	o_VBreakable,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
quadbounds()
= func_breakable_surf :
	"A breakable surface, for partially breakable glass / tile / etc.  All faces but the desired visible one must be marked as NODRAW and that" +
	"face must be 4 sided.  The material applied to the visible face must be set up to be breakable." 
[
	// RF order fix
]





//===================================================================================================================
// func_physbox [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Shadow (included)
//  mark as unsupported: HL2-spawnflags
//  removed: some spawnflags (new)
//  added: new spawnflags
//  removed: _minlight (unused)
//  removed: OnMotionEnabled (new)
//  removed: BreakableBrush (unused)
//  removed: overridescript (unused)
//  removed: forcetoenablemotion (new)
//  removed: notsolid (new)
//  removed: preferredcarryangles (unused)
//  removed: some physgun io's
//  removed: inputs EnableMotion,DisableMotion,ForceDrop,Sleep
//  removed: outputs OnPlayerUse,OnMotionEnabled
//  removed: hl2-spawnflags

@BaseClass
= e_func_physbox
[
	sep_pbmain(string) readonly: "------------------------------------"

	health(integer) : "Strength" : 0 : "Number of points of damage to take before breaking. \n0 means don't break."
	
	override_mass(float) : "Override Mass" : -1 : "[VTMB] Override the default object's mass value with this one. \n'-1' = don't override (use automatic)."
	physdamagescale(float) : "Impact Damage Scale" : "1.0" : "[VTMB] Scales damage energy when this object is hit by a physics object. \nNote: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	Damagetype(choices) : "Impact Damage Type" :  : "Type of damage to inflict on object damaged. \nNot used on original VtMB maps and not tested [works?]." = [ 0: "Blunt" 1: "Sharp" ]

	spawnflags(flags) =
	[
		1  : "Start Asleep" : 1
		16 : "Don't collide with the player or debris" : 0
		8  : "Flag 8 (unknown yet)" : 0
		32 : "Flag 32 (unknown yet)" : 0
	]

	// Inputs
	input Wake(void) : "Wake up this physics object, if it is sleeping."
	input PhysDamageScale(float) : "[VTMB] Set the Physics Impact Damage Scale for this character. \nNote: 0 means this feature is disabled for backwards compatibility [not tested]."

	// Outputs
	output OnDamaged(void) : "Fired when this entity is damaged."
	output OnAwakened(void) : "Fired when this entity becomes awake (collision/force is applied)."
	output OnPhysGunPickup(void) : "Fired when a player picks this object up, either with the physgun or +USE."
	output OnPhysGunDrop(void) : "Fired when a player drops this object."
]

@SolidClass
base (
	Targetname,
	p_Origin,
	Parentname,
	p_Origin,
	p_Global,
	e_func_physbox,
	o_VBreakable,
	RenderFields
)
line (
	255 255 255,
	targetname,
	parentname
)
= func_physbox :
	"A brush entity that's physically simulated."
[
	// RF order fix
]






//===================================================================================================================
// func_pushable [common, obsolete]
//===================================================================================================================

@BaseClass
= e_func_pushable
[
	sep_pushmain(string) readonly: "------------------------------------"

	mass(float) : "Object Mass" : "60" : "Set mass of this object."
	speed_damp(float) : "Speed Damping" : "10" : "Friction."
	rotate_damp(float) : "Rotate Damping" : "10" : "Rotate resistance."

	// inputs
	input SetDamageable(integer) : "Set this entity as able to make damage."
]

@SolidClass
base (
	Targetname,
	p_Origin,
	e_func_pushable,
	o_VBreakable,
	RenderFields
) = func_pushable :
	"A brush entity that can be pushed by player. Almost same as 'func_physbox' and now is obsolete."
[
	// RF order fix
]









































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// TRIGGERS
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: VBaseTrigger [VTMB-specific]
//===================================================================================================================

@BaseClass
base (
	Targetname,
	EnableDisable
)
= VBaseTrigger
[
	spawnflags(flags) = 
	[
		1: "Clients" : 1
		2: "NPCs" : 0
		4: "Pushables": 0
		8: "Physics Objects" : 0
		16: "Only player ally NPCs?" : 0
	]

 	// inputs
	input Enable(void) : "Enable this trigger."
	input Disable(void) : "Disable this trigger."
	input Toggle(void) : "Toggle this trigger between enabled and disabled states."
	input ToggleFlagClient(void) : "Toggle client's ability to use this trigger."
	input ToggleFlagNPC(void) : "Toggle NPC's ability to use this trigger."
	input EnableFlagClient(void) : "Enable client's ability to use this trigger."
	input EnableFlagNPC(void) : "Enable NPC's ability to use this trigger."
	input DisableFlagClient(void) : "Disable client's ability to use this trigger."
	input DisableFlagNPC(void) : "Disable NPC's ability to use this trigger."

	// outputs
	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filter-flags to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filter-flags will cause this output to fire."
]




//===================================================================================================================
// CLASS: Trigger [common]
//===================================================================================================================
// VTMB-adaptation:
//  merged with TriggerOnce
//  replaced: base(VBaseTrigger)
//  moved: spawnflags -> VBaseTrigger
//  removed: OnStartTouch/OnEndTouch,Toggle (duplicated)
//  removed: unused spawnflags (new)
//  removed: OnStartTouchAll,OnEndTouchAll (unused)

@BaseClass
base (
	VBaseTrigger,
	Parentname,
	p_Origin,
	p_Global
)
= ExtTrigger
[
	sep_trig(string) readonly: "------------------------------------"
	filtername(filterclass) : "Filter Name" : : "Filter to use to see if activator triggers me. \nSee filter_activator_name for more explanation."

	spawnflags(flags) = 
	[
		128: "Fire Once Only?" : 0
	]

	// Outputs
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]




//===================================================================================================================
// trigger_autosave [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: master (obsolete)
//  removed: DangerousTimer (new)
//  removed: MinimumHitPoints (new)
//  removed: NewLevelUnit (new)

@SolidClass
base(
	Targetname
)
= trigger_autosave :
	"A trigger volume that autosaves game when the player touches it."
[
]




//===================================================================================================================
// trigger_changelevel [common]
//===================================================================================================================
// VTMB-adaptation:
//  replaced: base(Targetname,Parentname,VBaseTrigger)
//  added: Tip_Size
//  removed: ChangeLevel (unsupported)
//  removed: spawnflag (4 - new)

@SolidClass
base (
	VBaseTrigger,
	Parentname
)
line (
	255 255 255,
	targetname,
	parentname
)
= trigger_changelevel :
	"An entity that triggers a level change.\n" +
	"Place an info_landmark in both maps that marks the 'same' location in each map.\n"+
	"TIPS & TRICKS: To fire events in the next level, use the OnLevelChange output to turn on "+
	"an env_global in the current level.  Create a logic_auto in the next level that checks "+
	"for the state set by the env_global.\n\n"+
	"To control which entities go through the level transition, create one or more trigger_transitions and "+
	"give them the same name as the landmark. Any entities within the trigger_transition(s) will go to the next map."
[
	sep_trig(string) readonly: "------------------------------------"

	map(string) : "New Map Name"
	landmark(target_destination) : "Landmark Name"
	Tip_Size(choices) : "Loading Tip Size" : 0 : "[VTMB] Size of tips shown when map loads [not tested]." =
	[
		0 : "0 (Default)"
	]

	spawnflags(flags) =
	[
		2: "Disable Touch" : 0
	]

	// connections
	input ChangeNow(void) : "[VTMB] Cause the level change. Use this when triggering the level change with a button, etc."
	output OnChangeLevel(void) : "Fired when the level changes."
	output OnTrigger(void) : "Fired whenever the trigger is activated."
]




//===================================================================================================================
// trigger_hurt [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: master (obsolete)
//  removed: nodmgforce (new)
//  removed: damagemodel (new)
//  removed: damagecap (new)
//  added: damagevelocitydir
//  added: damagevelocitymag
//  added: damagevelocitypos
//  added: origin (helps damagevelocitypos)

@SolidClass
base (
	VBaseTrigger,
	Parentname,
	p_Origin
)
halfgridsnap
= trigger_hurt :
	"A trigger volume that damages entities that touch it. \nBug Warning: Can't be parented directly to NPCs! Use some proxy entity as intermediate parent chain."
[
	sep_trig(string) readonly: "------------------------------------"

	damage(integer) : "Damage" : 10 : "The amount of damage done to entities that touch this trigger. The damage is done every half-second. See also 'Damage Model' for extra details on how damage can be dealt."
	damagetype(choices) : "Damage Type" : 0 =
	[
		0 : "GENERIC"
		1 : "CRUSH"
		2 : "BULLET"
		4 : "SLASH"
		8 : "BURN"
		16 : "FREEZE"
		32 : "FALL"
		64 : "BLAST"
		128 : "CLUB"
		256 : "SHOCK"
		512 : "SONIC"
		1024 : "ENERGYBEAM"
		16384: "DROWN"
		32768 : "PARALYSE"
		65536 : "NERVEGAS"
		131072 : "POISON"
		262144 : "RADIATION"
		524288 : "DROWNRECOVER"
		1048576 : "CHEMICAL"
		2097152 : "SLOWBURN"
		4194304 : "SLOWFREEZE"
	]
// vtmb ----
	damagevelocitydir(choices) : "Damage Velocity Direction" : 0 : "[VTMB] Unknown yet..." =
	[
		0 : "0 (Z?)"
		1 : "1 (X?)"
		2 : "2 (Y?)"
	]
	damagevelocitymag(float) : "Damage Velocity Magnitude" : 0 : "[VTMB] Unknown yet..."
	damagevelocitypos(vecline) : "Damage Velocity Position" :  : "[VTMB] Specify X Y Z origin on the map here [not tested]."

	// Inputs
	input SetDamage(float) : "Set a new amount of damage for this trigger."
	input HurtNow(void) : "[VTMB] Hurts the target object on output fired."
	
	// Outputs
	output OnHurt(void) : "Fired whenever this trigger hurts something other than a player."
	output OnHurtPlayer(void) : "Fired whenever this trigger hurts a player."
]




//===================================================================================================================
// trigger_impact [common]
//===================================================================================================================
// not changed.

@SolidClass
base (
	TargetnameRot
)
= trigger_impact :
	"A trigger volume that can be told to push all physics objects that are inside of it in the direction specified by this trigger's angles.\n"+
	"Also outputs the force at the time of impact for anyone else that wants to use it."
[
	sep_trig(string) readonly: "------------------------------------"

	Magnitude(float) : "Magnitude" : 500 : "The strength of the impact. Negative values reverse the direction."
	noise(float) : "Noise" : "0.1" : "The amount of directional noise (0-1). 0 = no noise, 1 = random direction."
	viewkick(float) : "View-kick" : "0.05" : "The amount to kick player's view if the player is in the trigger. \nProportional to magnitude (0-1)."

	// Inputs
	input Impact(void) : "Fire the impact, pushing all entities within the volume."
	input SetMagnitude(float) : "Set the magnitude of the impact."

	// Outputs
	output ImpactForce(string) : "Fired after an impact. The parameter passed along is the force of the impact that was generated."
]




//===================================================================================================================
// trigger_look [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: Timeout/OnTimeout (unsup)

@SolidClass
base (
	VBaseTrigger
)
= trigger_look :
	"An entity used to trigger something when the player looks at something. It fires 'OnTrigger' when the player "+
	"looks at a target entity for the given amount of time, while within the trigger volume. If the player leaves "+
	"the trigger or looks away from the target entity the clock resets. If the 'Use Velocity instead of facing' spawnflag " +
	"is checked, the trigger uses the player's velocity instead of the player's view, so it determines whenever the player "+
	"is moving toward the target entity. Useful for triggering when players are driving a vehicle at something."+
	"NOTE: Only designed for single-player game. "
[
	sep_trig(string) readonly: "------------------------------------"

	target(target_destination) : "Look Target" : : "The name of the entity to be looked at."
	LookTime(string) : "LookTime" : "0.5" : "The time, in seconds, that the player must look the target before firing the output. Resets if player leaves trigger, or looks outside the Field of View threshold."
	FieldOfView(string) : "Field of View" : "0.9" : "How close the player has to be looking at the target. 1.0 = straight ahead\n 0.0 = +/- 90 degrees\n -1.0 = all directions)."

	spawnflags(flags) = 
	[ 
		128: "Fire Once only" : 1 
		256: "Use Velocity instead of facing" : 0
	]

	// Outputs
	output OnTrigger(void) : "Fired when the trigger is activated."
]



//===================================================================================================================
// trigger_multiple [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: TouchTest (new)
//  removed: OnTouching,OnNotTouching (new)

@SolidClass
base (
	ExtTrigger
)
line (
	255 255 255,
	targetname,
	parentname
)
= trigger_multiple :
	"A trigger volume that can be triggered multiple times."
[
	wait(float) : "Delay Before Reset" : 1 : "Amount of time, in seconds, after the trigger_multiple has triggered before it can be triggered again. If set to -1, it will never trigger again (in which case you should just use a trigger_once)."
]




//===================================================================================================================
// trigger_once [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@SolidClass
base (
	ExtTrigger
)
line (
	255 255 255,
	targetname,
	parentname
)
= trigger_once :
	"A trigger volume that removes itself after it is triggered once."
[
]




//===================================================================================================================
// trigger_push [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: alternateticksfix (new)
//  removed: spawnflag (256 - new)
//  added: inputs SetSpeed,SetTargetSpeed
//  added: inputs SetAcceleration,Accel

@SolidClass
base (
	Targetname,
	VBaseTrigger
)
= trigger_push :
	"A trigger volume that pushes entities that touch it."
[
	sep_trig(string) readonly: "------------------------------------"

	speed(integer) : "Speed of Push" : 200 : "The speed at which to push entities away, in inches / second."
	angles(angle) : "Push Direction (Y Z X)" : "0 0 0" : "Angles indicating the direction to push touched entities."
//	pushdir(angle) : "Push Direction (Y Z X)" : "0 0 0" : "Angles indicating the direction to push touched entities."
	accel(float) : "Acceleration" : 20 : "[VTMB] Accel/deaccel to the specified speed, as a ratio of max speed. Negative values reverse the direction [-1, 1]."

	spawnflags(flags) = 
	[
		128: "Once Only" : 0
	]

	// inputs
	input SetSpeed(float) : "[VTMB] Set the trigger pushing speed (not tested)."
	input SetTargetSpeed(float) : "[VTMB] Set the target pushing speed (not tested)."
	input SetAcceleration(float) : "[VTMB] Set the moving acceleration (not tested)."
	input Accel(float) : "[VTMB] Set accel value (unknown)."
]




//===================================================================================================================
// trigger_teleport [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: crossfade
//  removed: spawnflag (32 - new)

@SolidClass
base (
	VBaseTrigger
)
= trigger_teleport :
	"A trigger volume that teleports entities that touch it. Entities are teleported to the Remote Destination, and have their angles "+
	"set to that of the Remote Destination's. If a Local Destination Landmark is specified, teleported entities are offset from the target "+
	"by their initial offset from the landmark, and their angles are left alone."
[
	sep_trig(string) readonly: "------------------------------------"

	target(target_destination) : "Remote Destination" : : "The entity specifying the point to which entities should be teleported."
	landmark(target_destination) : "Local Destination Landmark" : : "If specified, then teleported entities are offset from the target by their initial offset from the landmark."
	crossfade(float) : "Crossfade Time (secs)" : "0.5" : "[VTMB] Time of fade effect between player's transitions."
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
//
// Basic Props
//
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// prop_static [common]
//===================================================================================================================
// VTMB-adaptation:
//  merged with prop_static_base class
//  removed: DXLevelChoice (unused)
//  removed: screenspacefade,fadescale,ignorenormals (new)
//  removed: disablevertexlighting,disableselfshadowing (new)

@PointClass
base(
	p_Angles,
	p_Model
)
sphere(fademindist)
sphere(fademaxdist)
color(144 160 112)
studioprop()
= prop_static :
	"A prop that doesn't move and doesn't animate."
[
	skin(choices) : "Skin" : 0 : "Some models have multiple versions of their textures, called skins. Set this to a number other than 0 to use that skin instead of the default." =
	[ 0:0 1:1 2:2 3:3 4:4 5:5 6:6 7:7 8:8 9:9 10:10 11:11 12:12 13:13 14:14 15:15 16:16 17:17 18:18 19:19 20:20 21:21 22:22 23:23 24:24 25:25 26:26 27:27 28:28 29:29 30:30 31:31 ]

	sep_sprp(string) readonly: "------------------------------------"

	solid(choices) : "Collisions" : 6 : "Model's collision type." =
	[
		0: "Not Solid"
		2: "Use Bounding Box"
		6: "Use VPhysics"
	]
	disableshadows(choices) : "Disable Shadows" : 0 : "Disables lightmaps generation from this object." =
	[
		0 : "No"
		1 : "Yes"
	]
	fademindist(float) : "Start Fade Dist/Pixels" : -1 : "Distance at which the prop starts to fade (<0 = use fademaxdist). If 'Screen Space Fade' is selected, this represents the number of pixels wide covered by the prop when it starts to fade."
	fademaxdist(float) : "End Fade Dist/Pixels" : 0 : "Maximum distance at which the prop is visible (0 = don't fade out). If 'Screen Space Fade' is selected, this represents the *minimum* number of pixels wide covered by the prop when it fades."
	lightingorigin(target_destination) : "Lighting Origin" : "" : "Select an info_lighting to specify a location to sample lighting from, instead of using this entity's origin."
// UNIMPLEMENTED!!
//	shadowmodel(choices) : "Shadows Model Type" :  : "[New in v1.44] Overrides sub-model used for computing lightmaps casting from this prop. "+
//		"\nConvex hull is computed hull for current mesh; \nThe collision model is pre-rendered physics model that specified in .phy file."+
//		"\nIf phymodel is not found, the convex hull will be used instead." =
//	[
//		"" : "Convex Hull"
//		1  : "Collision Model"
//	]
]








//===================================================================================================================
// CLASS: c_ExplosionParams [VTMB-specific]
//===================================================================================================================

@BaseClass
= c_ExplosionParams
[
	ExplodeDamage(float) : "Explosion Damage" : 0 : "If non-zero, when this entity breaks it will create an explosion that causes the specified amount of damage. See also 'Explosion Radius'."
	ExplodeRadius(float) : "Explosion Radius" : 0 : "If non-zero, when this entity breaks it will create an explosion with a radius of the specified amount. See also 'Explosion Damage'."
	explosion_params(target_destination) : "Explosion Parameters" : : "[VTMB] A link to the 'params_explosion' entity that defines common explosion parameters."
]








//===================================================================================================================
// CLASS: prop_dynamic_base [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: DXLevelChoice (unused)
//  added: new solid value
//  added: new spawnflags
//  removed: spawnflags (64+ -new)
//  replaced: LoopSequence-> DefaultAnim
//  removed: SetBodyGroup (unused)
//  removed: SetPlaybackRate (new)
//  removed: lightingorigin (new)
//  removed: BaseFadeProp (unused)
//  removed: input SetBodyGroup (duplicated now)
//  removed: some io's (new)
//  added: new io's

@BaseClass
base (
	Studiomodel,
	Parentname,
	p_Global,
	o_VBreakable
)
color(127 127 255)
= PropDynamicBase
[
	sep_dprpcol(string) readonly: "------------------------------------"

	// collisions
	solid(choices) : "Collisions" : 6 : "Model's collision type." =
	[
		0: "Not Solid"
		2: "Use Bounding Box"
		6: "Use VPhysics"
		3: "Use Convex Hull"
	]
	npc_transparent(choices) : "NPC-Transparent" : 1 : "[VTMB] NPCs are transparent for this object [not tested]." = [ 0 : "No" 1 : "Yes" ]
	npc_opaque(choices) : "NPC-Opaque" :  : "[VTMB] Should be NPC opaque for this object or not [not tested]." = [ "" : "No" 1 : "Yes" ]

	sep_dprpanims(string) readonly: "------------------------------------"

	// animations
	demo_sequence(choices) : "Demo Sequence" : "None" : "[VTMB] Default animation sequence for the model to be playing after spawning." = [ "None" : "None"  "idle" : "Idle" ]
	LoopSequence(choices) : "Loop Sequence" :  : "[VTMB] The name of the idle animation that this prop will revert to whenever it finishes a random or forced animation." = [ "" : "None"  "idle" : "Idle" ]
	RandomAnimation(choices) : "Randomly Animate" : 0 : "If set, this prop will randomly choose and play animations, based upon the times specified in 'Min/Max Random Anim Time'. Inbetween the random animations, it will revert to playing the 'Default Animation'." = [ 0: "No" 1: "Yes" ]
	MinAnimTime(float) : "Min Random Anim Time" : 5 : "Minimum time between random animations."
	MaxAnimTime(float) : "Max Random Anim Time" : 10 : "Maximum time between random animations."

	sep_dprpphys(string) readonly: "------------------------------------"

	// physic params
	collideable_gibs(choices) : "Collidable Gibs" : 0 : "[VTMB] Collide model's gibs with environment when it breaks [not tested]." = 
	[
		0 : "Mode 0 (unknown)"
		1 : "Mode 1 (unknown)"
		2 : "Mode 2 (unknown)"
	]
	health(integer) : "Prop's Strength" : 0 : "[VTMB] Number of points of damage to take before breaking this prop. \n'0' = not breakable."

	// flags
	spawnflags(flags) =
	[
		16 : "Break on Touch" : 0
		32 : "Break on Pressure" : 0
	 // vtmb's
		1 : "Flag 1 (unknown yet)" : 0
		2 : "Flag 2 (unknown yet)" : 0
		4 : "Flag 4 (unknown yet)" : 0
		8192 : "Flag 8192 (unknown yet)" : 0
	]
	
	// inputs
	input SetAnimation(string) : "Force the prop to play an animation. The parameter should be the name of the animation."

	input PhysDamageScale(float) : "[VTMB] Set the Physics Impact Damage Scale for this character. \nNOTE: 0 means this feature is disabled for backwards compatibility [not tested]."
	input SetCausesImpactDamage(integer) : "[VTMB] Set amount of damage that this prop causes on selected output [not tested]."

	// Outputs
	output OnAnimationBegun(void) : "Fired whenever a new animation has begun playing."
	output OnAnimationDone(void) : "Fired whenever an animation is complete."
	output OnAnimationLoop(void) : "[VTMB] Fired whenever a new animation has looping."
]



//===================================================================================================================
// prop_dynamic [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: explosion_params
//  added: input (SetCausesImpactDamage)

@BaseClass
= e_prop_dynamic
[
	physdamagescale(float) : "Impact Damage Scale" :  : "[VTMB] Scales damage energy when this object is hit by a physics object. \nNote: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."
	blocks_traces(choices) : "Blocks Traces" : 0 : "[VTMB] Unknown yet..." =
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass
base (
	PropDynamicBase,
	c_ExplosionParams,
	e_prop_dynamic,
	RenderFields
)
//line (
//	255 255 255,
//	targetname,
//	parentname
//)
studioprop()
= prop_dynamic :
	"A prop that can be placed in hierarchy and can play animations. It can also be configured to break when it takes enough damage. "+
	"Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide."
[
	// RF order fix
]

 
//===================================================================================================================
// prop_dynamic_ornament [common]
//===================================================================================================================
// not changed.
// inserted to use modified classes.

@BaseClass
= e_prop_dynamic_ornament
[
	sep_dprpownr(string) readonly: "------------------------------------"
	InitialOwner(target_destination) : "Initial Target" : : "Name of the entity that this ornament should attach to, at startup."

	// Inputs
	input SetAttached(string) : "Attach the ornament to a different entity. Parameter should be the name of entity to attach to."
	input Detach(string) : "Detach from the Target Entity and become invisible. The ornament can be re-attached with the SetAttached input."
]

@PointClass
base (
	PropDynamicBase,
	e_prop_dynamic_ornament,
	RenderFields
)
//line (
//	255 255 255,
//	targetname,
//	parentname
//)
color(127 127 255)
studioprop()
= prop_dynamic_ornament :
	"A way to attach one studio model to another as an ornament. It will render in the way that player/NPC weapons render."
[
	// RF order fix
]









//===================================================================================================================
// CLASS: BasePropPhysics [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: DXLevelChoice (unused)
//  removed: spawnflags (64+ -new)
//  removed: inertiaScale,massScale,overridescript (unused)
//  removed: damagetoenablemotion,forcetoenablemotion (unused)
//  removed: fademindist,fademaxdist (unused)
//  removed: puntsound (new) 
//  removed: shadowcastdist (new)
//  removed: physcannon io's (new)
//  removed: damageforces io's (new)
//  removed: puntsound io's (new)
//  removed: DisableFloating (new)
//  removed: OnMotionEnabled (new)
//  removed: OnOutOfWorld (new)
//  removed: OnPlayerUse (unsup)
//  added: explosion_params
//  added: override_mass
//  added: npc_kickable
//  added: new io's

@BaseClass
base (
	Studiomodel,
	p_Global,
	o_VBreakable
)
color (127 63 0)
= BasePropPhysics
[
	sep_pprpmisc(string) readonly: "------------------------------------"

	// demoseq/colls
	demo_sequence(choices) : "Demo Sequence" : "None" : "[VTMB] Default animation sequence for the model to be playing after spawning." = [ "None" : "None"  "idle" : "Idle" ]
	npc_transparent(choices) : "NPC-Transparent" : 1 : "[VTMB] NPCs are transparent for this object [not tested]." = [ 0 : "No" 1 : "Yes" ]
	npc_kickable(choices) : "NPC-Kickable" : 1 : "[VTMB] NPCs can push and kick this object." = [ 0 : "No" 1 : "Yes" ]

	sep_dprpphys(string) readonly: "------------------------------------"

	// physic params
	collideable_gibs(choices) : "Collidable Gibs" : 0 : "[VTMB] Collide model's gibs with environment when it breaks [not tested]." = 
	[
		0 : "Mode 0 (unknown)"
		1 : "Mode 1 (unknown)"
		2 : "Mode 2 (unknown)"
	]
	override_mass(float) : "Mass Override" : -1 : "[VTMB] A scale multiplier for the object's mass."
	health(integer) : "Prop's Strength" : 0 : "[VTMB] Number of points of damage to take before breaking this prop. \n'0' = not breakable."
	physdamagescale(float) : "Impact Damage Scale" :  : "Scales damage energy when this object is hit by a physics object. \nNote: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."

	// flags
	spawnflags(flags) =
	[
		1 : "Start Asleep" : 1
		2 : "Don't take physics damage" : 0
		4 : "Debris - Don't collide with the player or other debris" : 0
		8 : "Motion Disabled" : 0
		8192 : "Flag 8192 (unknown yet)" : 0
	]
	
	// inputs
	input PhysDamageScale(float) : "[VTMB] Set the Physics Impact Damage Scale for this character. \nNOTE: 0 means this feature is disabled for backwards compatibility [not tested]."
	input SetCausesImpactDamage(integer) : "[VTMB] Set amount of damage that this prop causes on selected output [not tested]."

	// outputs
	output OnAwakened(void) : "Fired when this entity becomes awake (collision/force is applied to it while it's asleep)."
	output OnPlayerPickup(void) : "Fired whenever the player picks up this prop (with the physcannon or with +USE)."
]




//===================================================================================================================
// prop_physics [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: inputs (new)
//  fixed: RenderFields

@PointClass
base (
	BasePropPhysics,
	c_ExplosionParams,
	RenderFields
)
studioprop()
= prop_physics :
	"A prop that physically simulates as a single rigid body. It can be constrained to other physics objects using hinges "+
	"or other constraints. It can also be configured to break when it takes enough damage. "+
	"Note that the health of the object will be overridden by the health inside the model, to ensure consistent health game-wide. "+
	"If the model used by the prop is configured to be used as a prop_dynamic (i.e. it should not be physically simulated) then it CANNOT be "+
	"used as a prop_physics. Upon level load it will display a warning in the console and remove itself. Use a prop_dynamic instead."
[
	// RF order fix
]








//===================================================================================================================
// prop_ragdoll [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: DXLevelChoice (unused)
//  removed: spawnflags (new)
//  added: new spawnflag (32,8192)
//  removed: angleOverride (new)
//  removed: StartRagdollBoogie (new)
//  removed: BaseFadeProp (unused)
//  removed: inputs (new)

@BaseClass
= e_prop_ragdoll
[
	model(studio) : "Model" :  : "Object's model ('models/<file>.mdl'). \nMust be multi-boned and have a ragdoll animation in itself. \nClick arrow key and scroll down if want to use one of game's defaults." =
	[
		"models/character/monster/undead/female/undead_femalepart1.mdl" : "models/character/monster/undead/female/undead_femalepart1.mdl"
		"models/character/monster/undead/female/undead_femalepart2.mdl" : "models/character/monster/undead/female/undead_femalepart2.mdl"
		"models/character/monster/undead/female/undead_femalepart3.mdl" : "models/character/monster/undead/female/undead_femalepart3.mdl"
		"models/character/npc/common/citizen/female2/female_citizen_d.mdl" : "models/character/npc/common/citizen/female2/female_citizen_d.mdl"
		"models/character/npc/common/citizen/male2/male_citizen_2.mdl" : "models/character/npc/common/citizen/male2/male_citizen_2.mdl"
		"models/character/npc/common/corpse/corpse3.mdl" : "models/character/npc/common/corpse/corpse3.mdl"
		"models/character/npc/common/corpse/corpse3_noarm.mdl" : "models/character/npc/common/corpse/corpse3_noarm.mdl"
		"models/character/npc/common/corpse/corpse3_nolegs.mdl" : "models/character/npc/common/corpse/corpse3_nolegs.mdl"
		"models/character/npc/common/corpse/security_guard/Corpse2_torso.mdl" : "models/character/npc/common/corpse/security_guard/Corpse2_torso.mdl"
		"models/character/npc/common/corpse/security_guard/sg_corpse_full.mdl" : "models/character/npc/common/corpse/security_guard/sg_corpse_full.mdl"
		"models/character/npc/common/corpse/security_guard/sg_headless.mdl" : "models/character/npc/common/corpse/security_guard/sg_headless.mdl"
		"models/character/npc/common/lotusblossom_girl/lotusblossom_girl.mdl" : "models/character/npc/common/lotusblossom_girl/lotusblossom_girl.mdl"
		"models/character/npc/common/security_guard/security_guard_skinny/security_guard_skinny.mdl" : "models/character/npc/common/security_guard/security_guard_skinny/security_guard_skinny.mdl"
		"models/character/npc/common/skeleton/skeleton_female.mdl" : "models/character/npc/common/skeleton/skeleton_female.mdl"
		"models/character/npc/common/skeleton/skeleton_male.mdl" : "models/character/npc/common/skeleton/skeleton_male.mdl"
		"models/character/npc/common/super_swat/super_swat.mdl" : "models/character/npc/common/super_swat/super_swat.mdl"
		"models/character/npc/unique/Chinatown/Tong/tong.mdl" : "models/character/npc/unique/Chinatown/Tong/tong.mdl"
		"models/character/npc/unique/Downtown/Headless_Corpse/headless_corpse.mdl" : "models/character/npc/unique/Downtown/Headless_Corpse/headless_corpse.mdl"
		"models/character/npc/unique/Hollywood/Sewer_Worker/Sewer_Worker.mdl" : "models/character/npc/unique/Hollywood/Sewer_Worker/Sewer_Worker.mdl"
		"models/character/npc/unique/Malkavian_Mansion/Stalker/Stalker.mdl" : "models/character/npc/unique/Malkavian_Mansion/Stalker/Stalker.mdl"
		"models/character/npc/unique/Malkavian_Mansion/Stalker_Female/stalker_female.mdl" : "models/character/npc/unique/Malkavian_Mansion/Stalker_Female/stalker_female.mdl"
		"models/character/npc/unique/Santa_Monica/Brian/Brian.mdl" : "models/character/npc/unique/Santa_Monica/Brian/Brian.mdl"
		"models/character/npc/unique/santa_monica/malcolm/jasper.mdl" : "models/character/npc/unique/santa_monica/malcolm/jasper.mdl"
		"models/character/npc/unique/santa_monica/vandal/andrew.mdl" : "models/character/npc/unique/santa_monica/vandal/andrew.mdl"
	]
	sep_rprpspec(string) readonly: "------------------------------------"

	npc_transparent(choices) : "NPC-Transparent" : 1 : "[VTMB] NPCs are transparent for this object [not tested]." = [ 0 : "No" 1 : "Yes" ]
	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "[VTMB] Scales damage energy when this object is hit by a physics object. \nNote: 0 means this feature is disabled for backwards compatibility. \nSet to 1.0 for materials as strong as flesh, smaller numbers indicate stronger materials."

	spawnflags(flags) = 
	[
		4 : "Debris (don't collide with something)" : 0
		32 : "Flag 32 (unknown yet)" : 0
		8192 : "Flag 8192 (unknown yet)" : 0
	]

	input PhysDamageScale(float) : "[VTMB] Set the Physics Impact Damage Scale for this character. NOTE: 0 means this feature is disabled for backwards compatibility."
]

@PointClass
base (
	Studiomodel,
	e_prop_ragdoll,
	RenderFields
)
studioprop()
= prop_ragdoll :
	"A prop that physically simulates and can be articulated with internal joints. The joint constraints are part of the physics model."
[
	// RF order fix
]








































//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// NPCs
// 
//*******************************************************************************************************************
//*******************************************************************************************************************


//===================================================================================================================
// CLASS: VBaseNPC [VTMB-specific]
//===================================================================================================================

@BaseClass base(Studiomodel) = VBaseNPC
[
	sep_npcmain(string) readonly: "------------------------------------"
	
	base_gender(choices) : "Base Gender" : 1 : "Sets base NPC gender, such as male and female [seems to have no effect]." =
	[
		0 : "Female"
		1 : "Male"
	]

	default_disposition(choices) : "Default Disposition" : "Neutral" : "Default NPC's disposition. Goes to 'vdata/system/dispositiontable.txt' definitions." =
	[
		"Neutral" : "Neutral"
		"Anger" : "Anger"
		"Joy" : "Joy"
		"Sad" : "Sad"
		"Fear" : "Fear"
		"Disgust" : "Disgust"
		"Apathy" : "Apathy"
		"Flirtatious" : "Flirtatious"
		"Confused" : "Confused"
		"Lay" : "Lay"
		"Damaged" : "Damaged"
		"Dead" : "Dead"
		"Sitting" : "Sitting"
		"ChairDamaged" : "ChairDamaged"
		"BehindBack" : "BehindBack"
		"Therese" : "Therese"
		"Bartender" : "Bartender"
		"Lily" : "Lily"
		"PrinceSitting" : "PrinceSitting"
	]

	player_reaction(choices) : "Reaction to Player" : "D_NU 0" : "Type of NPC's relationship with player. Use <str_type> <int_degree> format,\n\n"+
		"  where <type> is: \n"+
		"    D_LI [0-10] --> Likes Player (Will Defend); \n"+
		"    D_NU [0-10] --> Neutral (Default); \n"+
		"    D_HT [0-10] --> Hates Player (Will Attack)." =
	[
		"D_LI 0" : "Likes (level 0)"
		"D_LI 1" : "Likes (level 1)"
		"D_LI 2" : "Likes (level 2)"
		"D_LI 3" : "Likes (level 3)"
		"D_LI 4" : "Likes (level 4)"
		"D_LI 5" : "Likes (level 5)"
		"D_LI 6" : "Likes (level 6)"
		"D_LI 7" : "Likes (level 7)"
		"D_LI 8" : "Likes (level 8)"
		"D_LI 9" : "Likes (level 9)"
		"D_LI 10": "Likes (level 10)"
		"D_NU 0" : "Neutral (level 0)"
		"D_NU 1" : "Neutral (level 1)"
		"D_NU 2" : "Neutral (level 2)"
		"D_NU 3" : "Neutral (level 3)"
		"D_NU 4" : "Neutral (level 4)"
		"D_NU 5" : "Neutral (level 5)"
		"D_NU 6" : "Neutral (level 6)"
		"D_NU 7" : "Neutral (level 7)"
		"D_NU 8" : "Neutral (level 8)"
		"D_NU 9" : "Neutral (level 9)"
		"D_NU 10": "Neutral (level 10)"
		"D_HT 0" : "Hates (level 0)"
		"D_HT 1" : "Hates (level 1)"
		"D_HT 2" : "Hates (level 2)"
		"D_HT 3" : "Hates (level 3)"
		"D_HT 4" : "Hates (level 4)"
		"D_HT 5" : "Hates (level 5)"
		"D_HT 6" : "Hates (level 6)"
		"D_HT 7" : "Hates (level 7)"
		"D_HT 8" : "Hates (level 8)"
		"D_HT 9" : "Hates (level 9)"
		"D_HT 10": "Hates (level 10)"
	]

	dialogname(vdialog) : "Dialog File" : "" : "Defines dialogue script depending on certain NPC and situation." =
	[
		"" : "None"
	]
	
	default_camera(vcamerashot) : "Default Camera Shot" : "DialogDefault" : "Default camera-shot definition applied when player interacts with this NPC. Related to 'vdata/CameraShots/*.txt' path." =
	[
	// CameraShotsList:
		"DialogDefault" : "DialogDefault"
		"vdata/CameraShots/dialogdefaultwoman.txt" : "DialogDefaultWoman"
		"vdata/CameraShots/dialogdefaultfastmove.txt" : "DialogDefaultFastMove"
		"vdata/CameraShots/dialoglowcenter.txt" : "DialogLowCenter"
		"vdata/CameraShots/dialoglowleft.txt" : "DialogLowLeft"
		"vdata/CameraShots/dialoglowright.txt" : "DialogLowRight"
		"vdata/CameraShots/dialogmediumshot.txt" : "DialogMediumShot"
		"vdata/CameraShots/dialogoverplayerleftshoulder.txt" : "DialogOverPlayerLeftShoulder"
		"vdata/CameraShots/dynamic1.txt" : "Dynamic1"
		"vdata/CameraShots/dynamic2.txt" : "Dynamic2"
		"vdata/CameraShots/dynamic3.txt" : "Dynamic3"
		"vdata/CameraShots/dynamic4.txt" : "Dynamic4"
		"vdata/CameraShots/dynamic5.txt" : "Dynamic5"
		"vdata/CameraShots/dynamic6.txt" : "Dynamic6"
		"vdata/CameraShots/dynamic7.txt" : "Dynamic7"
		"vdata/CameraShots/dynamic8.txt" : "Dynamic8"
		"vdata/CameraShots/dynamic9.txt" : "Dynamic9"
		"vdata/CameraShots/longapproachcloseup.txt" : "LongApproachCloseUp"
		"vdata/CameraShots/lookattarget.txt" : "LookAtTarget"
		"vdata/CameraShots/lookattarget_b.txt" : "LookAtTarget_B"
		"vdata/CameraShots/lookattarget_snap.txt" : "LookAtTarget_Snap"
		"vdata/CameraShots/lookattargethead_snap.txt" : "LookAtTargetHead_Snap"
		"vdata/CameraShots/center.txt" : "Center"
		"vdata/CameraShots/centerfullview.txt" : "CenterFullView"
		"vdata/CameraShots/lowcenter.txt" : "LowCenter"
		"vdata/CameraShots/mediumshot.txt" : "MediumShot"
		"vdata/CameraShots/npcfollow.txt" : "NPCFollow"
		"vdata/CameraShots/npcfollowcut.txt" : "NPCFollowCut"
		"vdata/CameraShots/npcfollowfromplayer.txt" : "NPCFollowFromPlayer"
		"vdata/CameraShots/npcfollowmove.txt" : "NPCFollowMove"
	]

	sep_npcequip(string) readonly: "-------------------------------------"

	additionalequipment(choices) : "Base Equipment" : 0 : "This is the weapon that NPC will basically use." =
	[
		"0" : "Nothing"
		"item_w_avamp_blade" : "item_w_avamp_blade"
		"item_w_baseball_bat" : "item_w_baseball_bat"
		"item_w_baton" : "item_w_baton"
		"item_w_bush_hook" : "item_w_bush_hook"
		"item_w_colt_anaconda" : "item_w_colt_anaconda"
		"item_w_crossbow" : "item_w_crossbow"
		"item_w_crossbow_flaming" : "item_w_crossbow_flaming"
		"item_w_deserteagle" : "item_w_deserteagle"
		"item_w_fireaxe" : "item_w_fireaxe"
		"item_w_fists" : "item_w_fists"
		"item_w_flamethrower" : "item_w_flamethrower"
		"item_w_glock_17c" : "item_w_glock_17c"
		"item_w_grenade_frag" : "item_w_grenade_frag"
		"item_w_ithaca_m_37" : "item_w_ithaca_m_37"
		"item_w_katana" : "item_w_katana"
		"item_w_knife" : "item_w_knife"
		"item_w_mac_10" : "item_w_mac_10"
		"item_w_occultblade" : "item_w_occultblade"
		"item_w_remington_m_700" : "item_w_remington_m_700"
		"item_w_rem_m_700_bach" : "item_w_rem_m_700_bach"
		"item_w_severed_arm" : "item_w_severed_arm"
		"item_w_sheriff_sword" : "item_w_sheriff_sword"
		"item_w_sledgehammer" : "item_w_sledgehammer"
		"item_w_steyr_aug" : "item_w_steyr_aug"
		"item_w_supershotgun" : "item_w_supershotgun"
		"item_w_thirtyeight" : "item_w_thirtyeight"
		"item_w_throwing_star" : "item_w_throwing_star"
		"item_w_tire_iron" : "item_w_tire_iron"
		"item_w_torch" : "item_w_torch"
		"item_w_uzi" : "item_w_uzi"
		"item_w_zombie_fists" : "item_w_zombie_fists"
	]

	alternateequipment(choices) : "Alternate Equipment" : 0 : "This is the weapon that NPC will use as alternative." =
	[
		"0" : "Nothing"
		"item_w_avamp_blade" : "item_w_avamp_blade"
		"item_w_baseball_bat" : "item_w_baseball_bat"
		"item_w_baton" : "item_w_baton"
		"item_w_bush_hook" : "item_w_bush_hook"
		"item_w_colt_anaconda" : "item_w_colt_anaconda"
		"item_w_crossbow" : "item_w_crossbow"
		"item_w_crossbow_flaming" : "item_w_crossbow_flaming"
		"item_w_deserteagle" : "item_w_deserteagle"
		"item_w_fireaxe" : "item_w_fireaxe"
		"item_w_fists" : "item_w_fists"
		"item_w_flamethrower" : "item_w_flamethrower"
		"item_w_glock_17c" : "item_w_glock_17c"
		"item_w_grenade_frag" : "item_w_grenade_frag"
		"item_w_ithaca_m_37" : "item_w_ithaca_m_37"
		"item_w_katana" : "item_w_katana"
		"item_w_knife" : "item_w_knife"
		"item_w_mac_10" : "item_w_mac_10"
		"item_w_occultblade" : "item_w_occultblade"
		"item_w_remington_m_700" : "item_w_remington_m_700"
		"item_w_rem_m_700_bach" : "item_w_rem_m_700_bach"
		"item_w_severed_arm" : "item_w_severed_arm"
		"item_w_sheriff_sword" : "item_w_sheriff_sword"
		"item_w_sledgehammer" : "item_w_sledgehammer"
		"item_w_steyr_aug" : "item_w_steyr_aug"
		"item_w_supershotgun" : "item_w_supershotgun"
		"item_w_thirtyeight" : "item_w_thirtyeight"
		"item_w_throwing_star" : "item_w_throwing_star"
		"item_w_tire_iron" : "item_w_tire_iron"
		"item_w_torch" : "item_w_torch"
		"item_w_uzi" : "item_w_uzi"
		"item_w_zombie_fists" : "item_w_zombie_fists"
	]

	cantdropweapons(choices) : "Can't Drop Weapons" : 0 : "If set, all NPC's weapons won't be available when it dead." = [ 0 : "No" 1 : "Yes" ]
	
	combat_start_activity(choices) : "Initial Combat Activity" : "-1" : "Defines NPC's combat animation when none of actions or outputs applied to him." =
	[
		"-1" : "None (default)"
		"ACT_INVALID" : "Invalid"
	]

	is_bossmonster(choices) : "NPC is Boss Monster" : 0 : "If set, shows blood scale on screen and process this NPC as a monster." =	[ 0 : "No" 1 : "Yes" ]
	invincible(choices) : "NPC is Invincible" : 0 : "If set, the player can't kill this NPC." = [ 0 : "No" 1 : "Yes" ]

	sep_npcstat(string) readonly: "------------------------------------"

	stattemplate(choices) : "NPC Stat Template" : "NPCGeneric" : "Goes to data in 'vdata/system/npctemplate***.txt'. NPCs in Hammer are assigned one of these which determines their statistics." =
	[
		"NPCGeneric" : "NPCGeneric"
		"CivilianGeneric" : "CivilianGeneric"
		"VampireGeneric" : "VampireGeneric"
		"Bum" : "Bum"
		"BumFastFood" : "BumFastFood"
		"Cabbie" : "Cabbie"
		"Doggie" : "Doggie"
		"Human" : "Human"
		"OfficerGeneric" : "OfficerGeneric"
		"Rat" : "Rat"
		"Zombie" : "Zombie"
		"AndreiBlood" : "AndreiBlood"
		"Ash" : "Ash"
		"AsianVampire" : "AsianVampire"
		"Bach" : "Bach"
		"Barabus" : "Barabus"
		"BeachhouseDennis" : "BeachhouseDennis"
		"BeachhouseThug" : "BeachhouseThug"
		"BishopVick" : "BishopVick"
		"BloodGuardian" : "BloodGuardian"
		"BloodHuntAuspex" : "BloodHuntAuspex"
		"BloodHuntCelerity" : "BloodHuntCelerity"
		"BloodHuntFortitude" : "BloodHuntFortitude"
		"BloodHuntPotence" : "BloodHuntPotence"
		"BloodHuntPresence" : "BloodHuntPresence"
		"BloodHuntProtean" : "BloodHuntProtean"
		"Blueblood" : "Blueblood"
		"BluebloodFastfood" : "BluebloodFastfood"
		"Bomberman" : "Bomberman"
		"BrotherKanker" : "BrotherKanker"
		"Bruno" : "Bruno"
		"CDC" : "CDC"
		"ChangBros" : "ChangBros"
		"ChangBrosClaw" : "ChangBrosClaw"
		"Chastity" : "Chastity"
		"ChunkGuard" : "ChunkGuard"
		"ClinicGuard" : "ClinicGuard"
		"CrackhousePlagueVictim" : "CrackhousePlagueVictim"
		"DaneGenCop" : "DaneGenCop"
		"DaneLessCop" : "DaneLessCop"
		"DoggieTemp" : "DoggieTemp"
		"DowntownThug" : "DowntownThug"
		"DowntownThugFastFood" : "DowntownThugFastFood"
		"DowntownTong" : "DowntownTong"
		"FuSecurity" : "FuSecurity"
		"Gargoyle" : "Gargoyle"
		"Gimble" : "Gimble"
		"Hengeyokai" : "Hengeyokai"
		"Hooker" : "Hooker"
		"HunterHuntingAsh38" : "HunterHuntingAsh38"
		"HunterHuntingAshCrossbows" : "HunterHuntingAshCrossbows"
		"HunterHuntingAshElite" : "HunterHuntingAshElite"
		"HunterSafeArea" : "HunterSafeArea"
		"HunterSafeArea2" : "HunterSafeArea2"
		"HunterSafeArea3" : "HunterSafeArea3"
		"Jezebel" : "Jezebel"
		"Johnny" : "Johnny"
		"Julius" : "Julius"
		"Killer" : "Killer"
		"LuFang" : "LuFang"
		"MalkMansionCroucher" : "MalkMansionCroucher"
		"MalkMansionStalker" : "MalkMansionStalker"
		"MalkMansionStalkerBurning" : "MalkMansionStalkerBurning"
		"ManBat" : "ManBat"
		"ManBatMinion" : "ManBatMinion"
		"ManBatOfficer" : "ManBatOfficer"
		"Mandarin" : "Mandarin"
		"Mercurio" : "Mercurio"
		"MingXiao" : "MingXiao"
		"MingXiaoProxy" : "MingXiaoProxy"
		"MingXiaoTentacle" : "MingXiaoTentacle"
		"MuseumGuard" : "MuseumGuard"
		"Nagaraja" : "Nagaraja"
		"Nos_Attacked" : "Nos_Attacked"
		"Plague-Bum" : "Plague-Bum"
		"RussianMafia" : "RussianMafia"
		"RussianMafia_Igor" : "RussianMafia_Igor"
		"RussianMafia_IgorCronies" : "RussianMafia_IgorCronies"
		"RussianMafiaElite" : "RussianMafiaElite"
		"SabbatAuspexMac10" : "SabbatAuspexMac10"
		"SabbatAuspexShottie" : "SabbatAuspexShottie"
		"SabbatAuspexSteyr" : "SabbatAuspexSteyr"
		"SabbatCelerityGlock" : "SabbatCelerityGlock"
		"SabbatCelerityMac10" : "SabbatCelerityMac10"
		"SabbatCelerityShottie" : "SabbatCelerityShottie"
		"SabbatFireMage" : "SabbatFireMage"
		"SabbatFortitudeShottie" : "SabbatFortitudeShottie"
		"SabbatGhoulGlock" : "SabbatGhoulGlock"
		"SabbatGhoulMac10" : "SabbatGhoulMac10"
		"SabbatGhoulMelee" : "SabbatGhoulMelee"
		"SabbatGhoulShottie" : "SabbatGhoulShottie"
		"SabbatPresenceShottie" : "SabbatPresenceShottie"
		"SabbatWithPotence" : "SabbatWithPotence"
		"SabbatWithProtean" : "SabbatWithProtean"
		"Scurrying" : "Scurrying"
		"SheriffMan" : "SheriffMan"
		"ShovelHead" : "ShovelHead"
		"SOC_average" : "SOC_average"
		"SOC_elite" : "SOC_elite"
		"sp_gio_average" : "sp_gio_average"
		"sp_gio_strong" : "sp_gio_strong"
		"sp_gio_weak" : "sp_gio_weak"
		"SuperSWAT" : "SuperSWAT"
		"SWAT" : "SWAT"
		"TongMugger" : "TongMugger"
		"TongThug" : "TongThug"
		"Tpl_firebolt" : "Tpl_firebolt"
		"Tpl_standard" : "Tpl_standard"
		"Tpl_star" : "Tpl_star"
		"Tpl_sword" : "Tpl_sword"
		"Tutorial_Jack" : "Tutorial_Jack"
		"TutorialShovelhead" : "TutorialShovelhead"
		"TutorialThug" : "TutorialThug"
		"TzimisceCreation1" : "TzimisceCreation1"
		"TzimisceCreation2" : "TzimisceCreation2"
		"TzimisceCreation3" : "TzimisceCreation3"
		"VampireBrujah" : "VampireBrujah"
		"VampireBrujahElite" : "VampireBrujahElite"
		"VampireBrujahThug" : "VampireBrujahThug"
		"VampireCritical" : "VampireCritical"
		"VampireGangrel" : "VampireGangrel"
		"VampireLasombra" : "VampireLasombra"
		"VampireLasombraBoss" : "VampireLasombraBoss"
		"VampireNosferatu" : "VampireNosferatu"
		"VampireSabbatLeader" : "VampireSabbatLeader"
		"VampireToreador" : "VampireToreador"
		"VentrueGhouls" : "VentrueGhouls"
		"VentrueSecurity" : "VentrueSecurity"
		"VentrueSecurityFastFood" : "VentrueSecurityFastFood"
		"WarehouseSabbatClaws" : "WarehouseSabbatClaws"
		"WarehouseThug" : "WarehouseThug"
		"WarehouseThugFastFood" : "WarehouseThugFastFood"
		"WarehouseThugLesser" : "WarehouseThugLesser"
		"Werewolf" : "Werewolf"
		"Yukie" : "Yukie"
		"Zhao" : "Zhao"
		"Clear" : "Clear"
	]
	npc_perception(choices) : "NPC Perception Level" : 3 : "Defines NPC's Perception ability level [1...10]." = [ 1:1 2:2 3:3 4:4 5:5 6:6 7:7 8:8 9:9 10:10 ]

	allow_alert_lookaround(choices) : "Allow Lookaround on Alert" : 1 : "Defines, should NPC be able to look around when alerted, or not." = 	[ 0 : "No" 1 : "Yes" ]
	allow_kick_hint_use(choices) : "Allow Kick Hint Usage" : 1 : "[VTMB] Unknown yet..." = 	[ 0 : "No" 1 : "Yes" ]

	sep_npcfeats(string) readonly: "------------------------------------"

	pl_criminal_attack(choices) : "Player Criminal Attack" : 6 : "A criminal level is set to the player for certain actions or by script. When the level is equal or greater thean the threshold, the apropriate action is triggered for the npc." =
	[
		"-1" : "None"
		"1" : "Level 1"
		"2" : "Level 2"
		"3" : "Level 3"
		"4" : "Level 4"
		"5" : "Level 5"
		"6" : "Level 6 (default)"
	]
	pl_criminal_flee(choices) : "Player Criminal Flee" : 6 : "A criminal level is set to the player for certain actions or by script. When the level is equal or greater thean the threshold, the apropriate action is triggered for the npc. \nFlee overrides attack and a value of 6 means no action because the max value is 5." =
	[
		"-1" : "None"
		"1" : "Level 1"
		"2" : "Level 2"
		"3" : "Level 3"
		"4" : "Level 4"
		"5" : "Level 5"
		"6" : "Level 6 (no action)"
	]
	pl_investigate(choices) : "Player Investigate" : -1 : "[VTMB] Unknown yet..." =
	[
		"-1" : "None"
		"1" : "Mode 1"
		"2" : "Mode 2"
		"3" : "Mode 3"
		"4" : "Mode 4"
		"5" : "Mode 5"
		"6" : "Mode 6 (default)"
	]
	pl_supernatural_attack(choices) : "Player Supernatural Attack" : 6 : "A supernatural level is set to the player for certain actions or by script. When the level is equal or greater thean the threshold, the apropriate action is triggered for the npc." =
	[
		"-1" : "None"
		"1" : "Level 1"
		"2" : "Level 2"
		"3" : "Level 3"
		"4" : "Level 4"
		"5" : "Level 5"
		"6" : "Level 6 (default)"
	]
	pl_supernatural_flee(choices) : "Player Supernatural Flee" : 6 : "A supernatural level is set to the player for certain actions or by script. When the level is equal or greater thean the threshold, the apropriate action is triggered for the npc. \nFlee overrides attack and a value of 6 means no action because the max value is 5." =
	[
		"-1" : "None"
		"1" : "Level 1"
		"2" : "Level 2"
		"3" : "Level 3"
		"4" : "Level 4"
		"5" : "Level 5"
		"6" : "Level 6 (no action)"
	]

	investigate_mode(choices): "Investigate Mode" : -1 : "[not tested] Measures your character's ability to notice minute or hidden details." =
	[
		"-1" : "None (default)"
		"1" : "Mode 1"
		"2" : "Mode 2"
		"3" : "Mode 3"
		"4" : "Mode 4"
		"5" : "Mode 5"
		"6" : "Mode 6 (often)"
	]
	investigate_mode_combat(choices): "Investigate Mode Combat" : -1 : "[VTMB] Unknown yet..." =
	[
		"-1" : "None (default)"
		"1" : "Mode 1"
		"2" : "Mode 2"
		"3" : "Mode 3"
		"4" : "Mode 4"
		"5" : "Mode 5"
		"6" : "Mode 6 (often)"
	]

	sep_npcmisc1(string) readonly: "------------------------------------"
	
	squadname(string) : "Squad Name" : : "NPCs that are in the same squad (i.e. have matching squad names) will share information about enemies, and will take turns attacking and covering each other."
	follower_type(choices) : "Follower Type" : "Default" : "This is defined in 'vdata/system/rules.txt' under the heading 'Npc_Follower_Info'. Determines at which distances a follower backs off from its boss, starts waking to the boss, or starts running to the boss." =
	[
		"Default" : "Default"
	]

	hearing(float) : "Hearing Volume" : "-1" : "NPC's hearing radius [0...100]. Set '-1' as default [not tested]."
	vision(float) : "Vision Radius" : "-1" : "NPC's vision radius (units). Set '-1' as default [not tested]."

	hint_groups(choices) : "Hint Groups" : "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32" : "Hint groups are used by NPCs to restrict their hint-node searching to a subset of the map's hint nodes. Only hint nodes with matching hint group names will be considered by this NPC. Enter the hint grops numbers here (e.g. '5 12 23 31')." =
	[
		"0" : "None (0)"
		"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32" : "All (1-32)"
	]

	sep_npcimage(string) readonly: "------------------------------------"
	
	clothescolor1(color255) : "NPC's Clothes Color 1" : "0 0 0 0" : "Overrides cloth's diffuse texture color."
	clothescolor2(color255) : "NPC's Clothes Color 2" : "0 0 0 0" : "Overrides cloth's diffuse texture color."
	skincolor(color255) : "NPC's Skin Color" : "0 0 0 0" : "Overrides NPC's skin diffuse texture color."
	haircolor(color255) : "NPC's Hair Color" : "0 0 0 0" : "Overrides NPC's hair diffuse texture color."
	trimcolor(color255) : "NPC's Skin Color" : "0 0 0 0" : "Overrides NPC's trim diffuse texture color."

	sep_npcproc(string) readonly: "------------------------------------"
	
	percent_occluded_chase(integer) : "Percent Occluded Chase" : 30 : "[VTMB] Unknown yet..."
	percent_occluded_cover(integer) : "Percent Occluded Cover" : 30 : "[VTMB] Unknown yet..."
	percent_occluded_flank(integer) : "Percent Occluded Flank" : 20 : "[VTMB] Unknown yet..."
	percent_occluded_wait(integer) : "Percent Occluded Wait" : 10 : "[VTMB] Unknown yet..."
	percent_occluded_walk(integer) : "Percent Occluded Walk" : 10 : "[VTMB] Unknown yet..."

	sep_npcadd1(string) readonly: "------------------------------------"
	
	physdamagescale(float) : "Physics Impact Damage Scale" : "1.0" : "Scales damage energy when this character is hit by a physics object. With a value of 0 the NPC will take no damage from physics."
	usescript(string) : "Use Python Script" : : "This is a Python script that defines additional dialog params [not tested]."
	nav_ignore_physics_props(choices) : "AI Ignore Physics Props" : 0 : "When defined, the NPC will ignore physics props' collisions when navigated between AI-nodes." =
	[
		0 : "No"
		1 : "Yes"
	] 

	spawnflags(Flags) = 
	[
		4 : "Fall to ground (unchecked means *teleport* to ground)" : 1
		16 : "Efficient - Don't acquire enemies or avoid obstacles" : 0
		256: "Long Visibility/Shoot" : 0
		2048: "Template NPC (used by npc_maker, will not spawn)" : 0
		4096: "Do Alternate collision for this NPC (player avoidance)" : 0
		8192: "Don't drop weapons" : 0
	 // vtmb
		1 : "Flag 1 (unknown yet)" : 0
		2 : "Flag 2 (unknown yet)" : 0
		8 : "Flag 8 (unknown yet)" : 0
		16384 : "Flag 16384 (unknown yet)" : 0
		32768 : "Flag 32768 (unknown yet)" : 0
	]

	// Inputs
	input SetHealth(integer) : "Set this NPC's health."
	input SetBodyGroup(integer) : "Hack: Sets this NPC's body group, by index (from 0 - n). You'd better know what you are doing!"
	input SetRelationship(string) : "Changes this entity's relationship with another entity or class. Format: <entityname/classname> <D_HT/D_FR/D_LI/D_NU> <priority>"
	input physdamagescale(float) : "Sets the value that scales damage energy when this character is hit by a physics object. NOTE: 0 means this feature is disabled for backwards compatibility."
	input SpawnTempParticle(string) : "Spawns temporary particle (define particle script in params) [not tested]."

	input pl_investigate(string) : "[VTMB: untested connection]"
	input pl_criminal_flee(string) : "Set a criminal flee level"
	input pl_criminal_attack(string) : "Set a criminal attack level"
	input pl_supernatural_flee(string) : "Set a supernatural flee level"
	input pl_supernatural_attack(string) : "Set a supernatural attack level"
	input WalkToNode(string) : "Makes NPC walk to selected node."
	input TweakParam(string) : "[VTMB: untested connection]"
	input SetupPatrolType(string) : "[VTMB: untested connection]"
	input FollowPatrolPath(string) : "[VTMB: untested connection]"
	input ClearPatrolPath(void) : "[VTMB: untested connection]"
	input StartPlayerDialog(void) : "[VTMB: untested connection]"
	input StartPlayerDialogRemote(void) : "[VTMB: untested connection]"
	input StartPlayerDialogUnforced(void) : "[VTMB: untested connection]"
	input FleeAndDie(void) : "[VTMB: untested connection]"
	input Faint(void) : "[VTMB: untested connection]"
	input DisableThink(integer) : "[VTMB: untested connection]"
	input TeleportToEntity(string) : "[VTMB: untested connection]"
	input TakeDamage(integer) : "Take specified amount of damage to object."
	input MakeInvincible(integer) : "Make NPC invincible."
	input UseInteresting(integer) : "Allow use Interesting Places feature."
	input SetInvestigateMode(integer) : "Set investigate mode [-?]."
	input SetInvestigateModeCombat(integer) : "Set investigate mode on combat [-?]."
	input SetSpeechVolume(string) : "Set NPC's speech volume."
	input PlayDialogFile(string) : "Play dialog file that will be aplied to this NPC."
	input AllowAlertLookaround(void) : "[VTMB: untested connection]"
	input StayEntrenched(integer) : "[VTMB: untested connection]"
	input AllowKickHintUse(void) : "[VTMB: untested connection]"
	input SetScriptedDiscipline(string) : "[VTMB: untested connection]"
	input SetBloodShieldDiscipline(integer) : "[VTMB: untested connection]"
	input SetFollowerBoss(string) : "[VTMB: untested connection]"
	input SetFollowerType(string) : "Set the NPC follower type."
	input SetFallToGround(integer) : "[VTMB: untested connection]"
	input ChangeSchedule(string) : "[VTMB: untested connection]"
	input SetDontFacePlayerInDialog(integer) : "[VTMB: untested connection]"
	input SetBossMonster(integer) : "Make this NPC to be a boss monster."
	input AllowOpenDoors(integer) : "Give the NPC ability to open doors."
	input SetMovementMultiplier(void) : "[VTMB: untested connection]"
	input SetDefaultDialogCamera(void) : "Set camera shot to dialog-default."
	input HumanityAdd(void) : "Add humanity point to player."
	input Bloodloss(void) : "Take blood point [-?]."
	input Bloodgain(void) : "Gain blood level [-?]."
	input ClearActiveDisciplines(void) : "Clears currently launched disciplines."
	input Inventory_Remove(void) : "[VTMB: untested connection]"
	input MoneyAdd(void) : "Add amount of money."
	input MoneyRemove(void) : "Remove amount of money."
	input BarterBegin(void) : "Begin barter process..."
	input BarterEnd(void) : "End barter process..."
	input BloodHeal(void) : "Player will be healing by blood."
	input FrenzyCheck(void) : "[VTMB: untested connection]"
	input FrenzyTrigger(void) : "[VTMB: untested connection]"
	input HungerCheck(void) : "[VTMB: untested connection]"
	input FrenzyUpdate(void) : "[VTMB: untested connection]"
	input PlayFloat(void) : "[VTMB: untested connection]"
	input WillTalk(integer) : "Make NPC talk (0 - disables, 1 - enables)"
	input ChangeMasqueradeLevel(void) : "Change player's Masquerade level. Positive number is a violation, and negative number is redemption."
	input FadeHeadAsCameraTarget(string) : "[VTMB: untested connection]"
	input FadeBodyAsCameraTarget(string) : "[VTMB: untested connection]"
	input SetHeadAsCameraTarget(void) : "[VTMB: untested connection]"
	input SetBodyAsCameraTarget(void) : "[VTMB: untested connection]"
	input LookAtEntityEye(string) : "[VTMB: untested connection]"
	input LookAtEntityCenter(string) : "[VTMB: untested connection]"
	input LookAtEntityOrigin(string) : "[VTMB: untested connection]"
	input LookAtEntityDefault(string) : "[VTMB: untested connection]"
	input SetSoundOverrideEnt(string) : "Works for the radio, the newscaster, and any other npc dialog. \n[Not sure about ambient_generic..]"
	input SetFakeSilence(integer) : "Shuts off the newscaster? \n[I don't know if it has an effect on other sound entities. Seems it have no effect on prop_radio or ambient_generic.]"

	// Outputs
	output OnDamaged(void) : "Fired when this NPC takes damage."
	output OnDeath(void) : "Fired when this NPC is killed." 
	output OnHalfHealth(void) : "Fired when this NPC reaches half of its maximum health."
	output OnHearWorld(void) : "Fired when this NPC hears a sound (other than combat or the player)."
	output OnHearPlayer(void) : "Fired when this NPC hears the player."
	output OnHearCombat(void) : "Fired when this NPC hears combat sounds."
	output OnFoundEnemy(string) : "Fired when this NPC establishes line of sight to its enemy (outputs entity)."
	output OnLostEnemyLOS(void) : "Fired when this NPC loses line of sight to its enemy."
	output OnLostEnemy(void) : "Fired when this NPC loses its enemy. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."
	output OnFoundPlayer(string) : "Fired when this NPC establishes line of sight to its enemy, and that enemy is a player (outputs player entity)."
	output OnLostPlayerLOS(void) : "Fired when this NPC loses line of sight to its enemy, and that enemy is a player."
	output OnLostPlayer(void) : "Fired when this NPC loses its enemy, and that enemy was a player. Usually due to the enemy being killed/removed, or because this NPC has selected a newer, more dangerous enemy."

	output OnNPCDied(void) : "Fired when this NPC died."
	output OnLastNPCDied(void) : "Fired when the last of this NPC died [-?]."
	output OnDialogBegin(void) : "Fired when dialog with NPC begin."
	output OnDialogEnd(void) : "Fired when dialog with NPC end."
	output OnInterestingPlaceArrived(void) : "Fired when interesting place arrived."
	output OnInterestingPlaceLeft(void) : "Fired when interesting place left."
	output OnUnknownVisionPlayer(void) : "[VTMB: untested connection]"
	output OnStateFleeing(void) : "[VTMB: untested connection]"
	output OnIncapacitatedStart(void) : "[VTMB: untested connection]"
	output OnIncapacitatedEnd(void) : "[VTMB: untested connection]"
	output OnGrappleBegin(void) : "Fired when grapple begins [-?]."
	output OnGrappleEnd(void) : "Fired when grapple ends [-?]."
	output OnFedUponBegin(void) : "[VTMB: untested connection]"
	output OnFedUponEnd(void) : "[VTMB: untested connection]"
	output OnSellWeapon(void) : "Fired when weapon sold."
	output OnBarterClose(void) : "Fired when barter process end."
]






//===================================================================================================================
// CLASS: VAddNPCFeats [VTMB-specific]
//===================================================================================================================

@BaseClass = VAddNPCFeats
[
	sep_npcaddf1(string) readonly: "------------------------------------"
	
	full_investigate(choices) : "Full Investigate [-?]" : 0 : "[VTMB] Unknown yet..." =
	[
		0 : "No"
		1 : "Yes"
	]
	use_interesting(choices) : "Use Interesting Places" : 0 : "Make NPC to use Interesting Places' features. \nThis and the interesting groups work fine if there are info_nodes in the area of the interesting places." =
	[
		0 : "No"
		1 : "Yes"
	]
	interesting_place_groups(choices) : "Interesting Place Groups" : "0" : "[VTMB] Unknown yet. Type numbers of groups dividing with spaces." =
	[
		"0" : "None (0)"
		"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32" : "All (1-32)"
	]
	soundgroup(choices) : "Sound Group" : : "NPC Sound group. \n\nThe group of sounds relative to 'sound/character/*' that specifies base NPC action sounds. See 'vdata/system/sndscheme_char.txt' for more details." = 
	[
		"*" : "- All -"
		"" : "Default"
		"Asian" : "Asian"
		"Blue_Blood" : "Blue_Blood"
		"Bum" : "Bum"
		"Bum/Sick_Bum" : "Bum/Sick_Bum"
		"Citizen" : "Citizen"
		"Hunter" : "Hunter"
		"Patron_Club" : "Patron_Club"
		"Unique" : "Unique"
		"/" : "        "
		"*" : "- Male -"
		"Al" : "Al"
		"Bum/Old_Bum_Overpass" : "Bum/Old_Bum_Overpass"
		"Citizen/Office Person 2" : "Citizen/Office Person 2"
		"Citizen_2" : "Citizen_2"
		"Citizen_Chinatown" : "Citizen_Chinatown"
		"Citizen_Goth" : "Citizen_Goth"
		"Giovanni_Guest_2" : "Giovanni_Guest_2"
		"Guard" : "Guard"
		"Italian_Accent" : "Italian_Accent"
		"Mafia" : "Mafia"
		"Museum_Guard" : "Museum_Guard"
		"Officer" : "Officer"
		"Officer/Dane_officer" : "Officer/Dane_officer"
		"Officer/Officer_2" : "Officer/Officer_2"
		"Officer/Pier_Cop" : "Officer/Pier_Cop"
		"Patron_Club/Male_Dancer_1" : "Patron_Club/Male_Dancer_1"
		"Patron_Club/Male_Dancer_2" : "Patron_Club/Male_Dancer_2"
		"Sabbat_Thug" : "Sabbat_Thug"
		"Stalker" : "Stalker"
		"Young_Thug" : "Young_Thug"
		"Unique/Ash_Lookalike" : "Unique/Ash_Lookalike"
		"Unique/Brian" : "Unique/Brian"
		"Unique/Bum" : "Unique/Bum"
		"Unique/Bum_Disease_male" : "Unique/Bum_Disease_male"
		"Unique/Cal" : "Unique/Cal"
		"Unique/CDC floats" : "Unique/CDC floats"
		"Unique/Chunk" : "Unique/Chunk"
		"Unique/Chunk2" : "Unique/Chunk2"
		"Unique/Clinic_Guard" : "Unique/Clinic_Guard"
		"Unique/Copper" : "Unique/Copper"
		"Unique/Dennis" : "Unique/Dennis"
		"Unique/E" : "Unique/E"
		"Unique/Gary" : "Unique/Gary"
		"Unique/Gimble" : "Unique/Gimble"
		"Unique/Ji" : "Unique/Ji"
		"Unique/Johansen" : "Unique/Johansen"
		"Unique/Johnny" : "Unique/Johnny"
		"Unique/Julius" : "Unique/Julius"
		"Unique/Larry" : "Unique/Larry"
		"Unique/LuFang" : "Unique/LuFang"
		"Unique/Malcolm" : "Unique/Malcolm"
		"Unique/McFly" : "Unique/McFly"
		"Unique/Mercurio" : "Unique/Mercurio"
		"Unique/Milligan" : "Unique/Milligan"
		"Unique/Phil" : "Unique/Phil"
		"Unique/Ricky" : "Unique/Ricky"
		"Unique/Slater" : "Unique/Slater"
		"Unique/SmBlueBlood" : "Unique/SmBlueBlood"
		"Unique/Tin_Can_Bill" : "Unique/Tin_Can_Bill"
		"Unique/Tommy" : "Unique/Tommy"
		"Unique/Tongie" : "Unique/Tongie"
		"Unique/Trip" : "Unique/Trip"
		"Unique/Tseng" : "Unique/Tseng"
		"Unique/Vandal" : "Unique/Vandal"
		"Unique/Victor" : "Unique/Victor"
		"/" : "          "
		"*" : "- Female -"
		"Blue_Blood/Giovanni Guest" : "Blue_Blood/Giovanni Guest"
		"Blue_Blood/Giovanni Guest 2" : "Blue_Blood/Giovanni Guest 2"
		"Citizen/Citizen_Hollywood" : "Citizen/Citizen_Hollywood"
		"Croucher" : "Croucher"
		"Hooker1" : "Hooker1"
		"Hooker2" : "Hooker2"
		"Hooker3" : "Hooker3"
		"Patron_Bar" : "Patron_Bar"
		"Patron_Bar/Vesuvius" : "Patron_Bar/Vesuvius"
		"Patron_Club/Confession" : "Patron_Club/Confession"
		"Patron_Club/Glaze" : "Patron_Club/Glaze"
		"Patron_Club/Female_Dancer_1" : "Patron_Club/Female_Dancer_1"
		"Patron_Club/Female_Dancer_2" : "Patron_Club/Female_Dancer_2"
		"Patron_Club/Female_Dancer_3" : "Patron_Club/Female_Dancer_3"
		"Patron_Diner" : "Patron_Diner"
		"Unique/Bum_Disease_female" : "Unique/Bum_Disease_female"
		"Unique/Damsel" : "Unique/Damsel"
		"Unique/Danielle" : "Unique/Danielle"
		"Unique/Doris" : "Unique/Doris"
		"Unique/Hannah" : "Unique/Hannah"
		"Unique/Hostess" : "Unique/Hostess"
		"Unique/Hostess2" : "Unique/Hostess2"
		"Unique/Jeanette" : "Unique/Jeanette"
		"Unique/Jezebel" : "Unique/Jezebel"
		"Unique/Kiki" : "Unique/Kiki"
		"Unique/Lily" : "Unique/Lily"
		"Unique/Maria" : "Unique/Maria"
		"Unique/Misti" : "Unique/Misti"
		"Unique/Nurse" : "Unique/Nurse"
		"Unique/Therese" : "Unique/Therese"
		"Unique/Venus" : "Unique/Venus"
		"Unique/Yukie" : "Unique/Yukie"
		"/" : "        "
		"*" : "- Monster -"
		"Andrei_Transformed" : "Andrei_Transformed"
		"Gargoyle" : "Gargoyle"
		"Hengeyokai" : "Hengeyokai"
		"Ming Xiao" : "Ming Xiao"
		"Ming Xiao Proxy" : "Ming Xiao Proxy"
		"SabbatLeader" : "SabbatLeader"
		"Sheriff_Manbat" : "Sheriff_Manbat"
		"Shovel_Head" : "Shovel_Head"
		"Spiderchick" : "Spiderchick"
		"TC_FatGuy" : "TC_FatGuy"
		"TC_Runner" : "TC_Runner"
		"Werewolf" : "Werewolf"
		"Zombie_Male" : "Zombie_Male"
		"Zombie_Female" : "Zombie_Female"
	]
	team_name(string) : "Team Name" : : "[VTMB] Unknown yet..."
	ignore_detected_attack(choices) : "Ignore Detected Attack" : 0 : "Ignores when detects attack from other side." =
	[
		0 : "No"
		1 : "Yes"
	]

	sep_npcaddf2(string) readonly: "------------------------------------"

	no_alert_state(choices) : "No-Alert State" : 0 : "States of NPC when no alert goings on." =
	[
		0 : "State 0 (unknown yet)"
		1 : "State 1 (unknown yet)"
	]
	bright_route_penalty(integer) : "Bright Route Penalty [-?]" : 0 : "[VTMB] Unknown yet..."
	stay_entrenched(choices) : "Stay Entrenched [-?]" : 0 : "[VTMB] Unknown yet..." =
	[
		0 : "No"
		1 : "Yes"
	]
	teleport_move_timer(integer) : "Teleport Move Timer [-?]" : 0 : "[VTMB] Unknown yet..."
	floatfreq(integer) : "Floats Frequency" : 2 : "[VTMB] Determines how often this NPC will play float sound lines when player's near him. Higher values will make floats play more often, '0' disables them fully."
]






//===================================================================================================================
// CLASS: BaseNPCMaker [common]
//===================================================================================================================
// VTMB-adaptation:
//  removed: EnableDisable (analog)
//  removed: some children-io's (new)
//  added: MinPCDistance
//  added: Vtmb-Flags

@BaseClass base(TargetnameRot) iconsprite("editor/npc_maker.vmt") color(0 0 255) = BaseNPCMaker
[
	spawnflags(Flags) = 
	[
		// Only in npc_maker
		16 : "Fade Corpse" : 0
		32 : "Infinite Children" : 0
		64 : "Do Not Drop" : 0
		128 : "Don't Spawn While Visible" : 0
	]

	MaxNPCCount(integer) : "Num. of NPCs" : 4 : "Number of NPCs that will spawn before this spawner is exhausted."
	SpawnFrequency(string) : "Frequency" : "5" : "How often (in seconds) a new NPC will be spawned. If set to -1, a new NPC will be made when the last NPC dies."
	MaxLiveChildren(integer) : "Max Live NPCs" : 5 : "Maximum number of live children allowed at any one time (new ones will not be made until one dies). If set to -1, no limit is applied."
	
	// Outputs
	output OnSpawnNPC(string) : "Fired when an NPC is spawned. The activator is the NPC, and the string is the name of the NPC." 
	output OnAllSpawned(void) : "Fired when the spawned is exhausted (all children have been spawned)."
	output OnAllSpawnedDead(void) : "Fired when the spawner is exhausted (all children have been spawned) and all spawned children have died."

	// Inputs
	input Spawn(void) : "Spawns an NPC."
	input Toggle(void) : "Toggles the spawner enabled/disabled state."
	input Enable(void) : "Enables the spawner."
	input Disable(void) : "Disables the spawner."
	input SetMaxChildren(integer) : "Sets the maximum number of children for this spawner."

// vtmb ----
	MinPCDistance(integer) : "Minimum Player Distance [-?]" : 0 : "[VTMB] Unknown yet..."

	sep_bnpcmk1(string) readonly: "------------------------------------"

	Flag_Fade(choices) : "Flag: Fade" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_InfChild(choices) : "Flag: Infinity Child" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_IsGlobalSpawner(choices) : "Flag: Is Global Spawner" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_NoDrop(choices) : "Flag: No Drop" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_NPCClip(choices) : "Flag: NPC-Clip" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_StartDisabled(choices) : "Flag: Start Disabled" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_UseGlobalSpawnerSettings(choices) : "Flag: Use Global Spawner Settings" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_ViewCone(choices) : "Flag: View Cone" : 0 : "Applies the selected property." = [ 0 : "False" 1 : "True" ]
	Flag_ZombieAIType(choices) : "Flag: Zombie AI Type" : 0 : "Applies the selected property." = 
	[ 
		0 : "Do not use" 
		1 : "Type 1 (unknown yet)" 
		2 : "Type 2 (unknown yet)" 
		3 : "Type 3 (unknown yet)" 
		4 : "Type 4 (unknown yet)" 
		5 : "Type 5 (unknown yet)" 
		6 : "Type 6 (unknown yet)" 
		7 : "Type 7 (unknown yet)" 
		8 : "Type 8 (unknown yet)" 
	]

	sep_bnpcmk2(string) readonly: "------------------------------------"
]







//===================================================================================================================
// npc_maker [common]
//===================================================================================================================
// VTMB-adaptation:
//  added: vtmb-notes
//  removed: Angles (included)
//  added: base(VBaseNPC,VAddNPCFeats)
//  removed: NPCHintGroup (analog)
//  removed: additionalequipment (included)
//  removed: spawnflags (included)

@PointClass base(BaseNPCMaker,VBaseNPC,VAddNPCFeats) iconsprite("editor/npc_maker.vmt") = npc_maker : 
	"NPC Maker.\n\n"+
	
	"[VTMB] NOTES: Many of the games entities are created dynamically. Most encounters involving combat, the enemies are spawned on the fly based on a template. The pedetrians walking around in the city and the cops... all spawned on the fly.\n\n"+

    "Dynamically spawned NPCs are created by npc_maker. Each maker is associated with an NPC template. Template definitions can be found under the vdata/system directory. You can also type 'vclans' in the console for a list of all templates. Note that most are named 'None'.\n\n"+

    "Templates have a templatename and then a normal name. templatename is required and must be unique, but not a normalname.. vclans only displays normal names.\n"+
	"As you might have guessed from the console command, Template and clan are pretty much the same thing. To tell the npc_maker object what kind of NPC template you want it to make, you set its stattemplate property.\n"+
	"You can override stattemplate values within the local embedded declaration. For example, you would likely set the model and starting equipment locally."
[
	sep_npcmk1(string) readonly: "------------------------------------"

	NPCType(npcclass) : "NPC Type" : "npc_VPedestrian" : "Class name of spawned NPC"
	NPCTargetname(string) : "Children's Name" :  : "Childrens' NPC Name"
	NPCSquadname(string) : "Squad Name" :  : "Childrens' Squad Name"
]




















//*******************************************************************************************************************
//*******************************************************************************************************************
// 
// End of FGD
// 
//*******************************************************************************************************************
//*******************************************************************************************************************
